<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Club;
use App\Models\Teacher;
use App\Models\Student;
use App\Models\Lesson;
use App\Models\CourseType;
use App\Models\Location;
use App\Models\Payment;
use App\Models\Invoice;
use Carbon\Carbon;

class LessonHistorySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        echo "üìö Cr√©ation de l'historique complet des cours...\n";

        // R√©cup√©rer les donn√©es existantes
        $clubs = Club::all();
        $courseTypes = CourseType::all();
        $locations = Location::all();
        
        if ($clubs->isEmpty() || $courseTypes->isEmpty() || $locations->isEmpty()) {
            echo "‚ùå Donn√©es manquantes. Veuillez d'abord ex√©cuter les seeders de base.\n";
            return;
        }

        // R√©cup√©rer les enseignants et √©tudiants associ√©s aux clubs
        $teachers = Teacher::whereHas('user', function($query) {
            $query->whereHas('clubs');
        })->with(['user', 'user.clubs'])->get();

        $students = Student::whereHas('user', function($query) {
            $query->whereHas('clubs');
        })->with(['user', 'user.clubs'])->get();

        if ($teachers->isEmpty() || $students->isEmpty()) {
            echo "‚ùå Aucun enseignant ou √©tudiant associ√© aux clubs trouv√©.\n";
            return;
        }

        echo "üìä Donn√©es trouv√©es :\n";
        echo "- " . $clubs->count() . " clubs\n";
        echo "- " . $courseTypes->count() . " types de cours\n";
        echo "- " . $locations->count() . " lieux\n";
        echo "- " . $teachers->count() . " enseignants\n";
        echo "- " . $students->count() . " √©tudiants\n";

        // Cr√©er l'historique des cours (6 derniers mois)
        $this->createHistoricalLessons($teachers, $students, $courseTypes, $locations, $clubs);

        // Cr√©er les cours √† venir (3 prochains mois)
        $this->createUpcomingLessons($teachers, $students, $courseTypes, $locations, $clubs);

        echo "‚úÖ Historique des cours cr√©√© avec succ√®s !\n";
    }

    /**
     * Cr√©er l'historique des cours pass√©s
     */
    private function createHistoricalLessons($teachers, $students, $courseTypes, $locations, $clubs)
    {
        echo "üìÖ Cr√©ation de l'historique des cours (6 derniers mois)...\n";

        $startDate = Carbon::now()->subMonths(6);
        $endDate = Carbon::now()->subDay();

        $statuses = ['completed', 'completed', 'completed', 'cancelled', 'no_show']; // Plus de cours termin√©s
        $ratings = [4, 5, 5, 4, 5, 3, 4, 5]; // Notes g√©n√©ralement bonnes

        $lessonCount = 0;
        $paymentCount = 0;

        // Cr√©er environ 200 cours historiques
        for ($i = 0; $i < 200; $i++) {
            $teacher = $teachers->random();
            $student = $students->random();
            $courseType = $courseTypes->random();
            $location = $locations->random();
            $club = $clubs->random();

            // V√©rifier que l'enseignant et l'√©tudiant sont dans le m√™me club
            if (!$this->areInSameClub($teacher->user, $student->user)) {
                continue;
            }

            $startTime = Carbon::createFromTimestamp(
                rand($startDate->timestamp, $endDate->timestamp)
            );

            // Ajuster l'heure pour des cr√©neaux r√©alistes (8h-20h)
            $startTime->setTime(rand(8, 19), rand(0, 3) * 15); // Cr√©neaux de 15min
            $endTime = $startTime->copy()->addMinutes($courseType->duration ?? 60);

            $status = $statuses[array_rand($statuses)];
            $price = $courseType->price ?? rand(40, 80);

            $lesson = Lesson::create([
                'teacher_id' => $teacher->id,
                'student_id' => $student->id,
                'course_type_id' => $courseType->id,
                'location_id' => $location->id,
                'start_time' => $startTime,
                'end_time' => $endTime,
                'status' => $status,
                'price' => $price,
                'notes' => $this->generateLessonNotes($status, $courseType->name),
                'teacher_feedback' => $status === 'completed' ? $this->generateTeacherFeedback() : null,
                'rating' => $status === 'completed' ? $ratings[array_rand($ratings)] : null,
                'review' => $status === 'completed' && rand(0, 100) > 30 ? $this->generateStudentReview() : null,
            ]);

            // Associer l'√©tudiant au cours via la table pivot
            $lesson->students()->attach($student->id, [
                'status' => $status,
                'price' => $price,
                'notes' => $lesson->notes
            ]);

            // Cr√©er un paiement pour les cours termin√©s
            if ($status === 'completed' && rand(0, 100) > 20) { // 80% ont un paiement
                $this->createPaymentForLesson($lesson, $student);
                $paymentCount++;
            }

            $lessonCount++;
        }

        echo "‚úÖ " . $lessonCount . " cours historiques cr√©√©s\n";
        echo "üí∞ " . $paymentCount . " paiements cr√©√©s\n";
    }

    /**
     * Cr√©er les cours √† venir
     */
    private function createUpcomingLessons($teachers, $students, $courseTypes, $locations, $clubs)
    {
        echo "üîÆ Cr√©ation des cours √† venir (3 prochains mois)...\n";

        $startDate = Carbon::now()->addDay();
        $endDate = Carbon::now()->addMonths(3);

        $statuses = ['pending', 'confirmed', 'confirmed', 'confirmed']; // Plus de cours confirm√©s
        $lessonCount = 0;

        // Cr√©er environ 150 cours √† venir
        for ($i = 0; $i < 150; $i++) {
            $teacher = $teachers->random();
            $student = $students->random();
            $courseType = $courseTypes->random();
            $location = $locations->random();
            $club = $clubs->random();

            // V√©rifier que l'enseignant et l'√©tudiant sont dans le m√™me club
            if (!$this->areInSameClub($teacher->user, $student->user)) {
                continue;
            }

            $startTime = Carbon::createFromTimestamp(
                rand($startDate->timestamp, $endDate->timestamp)
            );

            // Ajuster l'heure pour des cr√©neaux r√©alistes (8h-20h)
            $startTime->setTime(rand(8, 19), rand(0, 3) * 15); // Cr√©neaux de 15min
            $endTime = $startTime->copy()->addMinutes($courseType->duration ?? 60);

            $status = $statuses[array_rand($statuses)];
            $price = $courseType->price ?? rand(40, 80);

            $lesson = Lesson::create([
                'teacher_id' => $teacher->id,
                'student_id' => $student->id,
                'course_type_id' => $courseType->id,
                'location_id' => $location->id,
                'start_time' => $startTime,
                'end_time' => $endTime,
                'status' => $status,
                'price' => $price,
                'notes' => $this->generateLessonNotes($status, $courseType->name),
            ]);

            // Associer l'√©tudiant au cours via la table pivot
            $lesson->students()->attach($student->id, [
                'status' => $status,
                'price' => $price,
                'notes' => $lesson->notes
            ]);

            $lessonCount++;
        }

        echo "‚úÖ " . $lessonCount . " cours √† venir cr√©√©s\n";
    }

    /**
     * V√©rifier si l'enseignant et l'√©tudiant sont dans le m√™me club
     */
    private function areInSameClub($teacher, $student)
    {
        $teacherClubs = $teacher->clubs()->pluck('clubs.id')->toArray();
        $studentClubs = $student->clubs()->pluck('clubs.id')->toArray();
        
        return !empty(array_intersect($teacherClubs, $studentClubs));
    }

    /**
     * Cr√©er un paiement pour un cours
     */
    private function createPaymentForLesson($lesson, $student)
    {
        $paymentMethods = ['card', 'cash', 'transfer', 'check'];
        $paymentStatuses = ['completed', 'completed', 'completed', 'pending'];

        Payment::create([
            'lesson_id' => $lesson->id,
            'student_id' => $student->id,
            'amount' => $lesson->price,
            'payment_method' => $paymentMethods[array_rand($paymentMethods)],
            'payment_status' => $paymentStatuses[array_rand($paymentStatuses)],
            'payment_date' => $lesson->start_time->addDays(rand(0, 7)), // Paiement dans les 7 jours
            'transaction_id' => 'TXN_' . strtoupper(uniqid()),
            'notes' => 'Paiement pour cours de ' . $lesson->courseType->name,
        ]);
    }

    /**
     * G√©n√©rer des notes de cours
     */
    private function generateLessonNotes($status, $courseType)
    {
        $notes = [
            'completed' => [
                'Excellent cours, progression visible',
                'Bon travail sur la technique',
                '√âl√®ve motiv√© et attentif',
                'Am√©lioration notable depuis la derni√®re s√©ance',
                'Cours productif, objectifs atteints',
                'Tr√®s bon niveau aujourd\'hui',
                '√âl√®ve en confiance, excellente s√©ance',
                'Travail technique approfondi',
                'Progression constante observ√©e',
                'S√©ance tr√®s satisfaisante'
            ],
            'confirmed' => [
                'Cours confirm√©',
                'Rendez-vous confirm√©',
                'S√©ance programm√©e',
                'Cours planifi√©',
                'Rendez-vous √©tabli'
            ],
            'pending' => [
                'En attente de confirmation',
                'Cours en cours de planification',
                'Rendez-vous √† confirmer',
                'S√©ance en attente',
                'Cours programm√©'
            ],
            'cancelled' => [
                'Cours annul√© par l\'√©l√®ve',
                'Annulation pour cause de maladie',
                'Cours report√©',
                'Annulation pour impr√©vu',
                'S√©ance annul√©e'
            ],
            'no_show' => [
                '√âl√®ve absent sans pr√©venir',
                'Absence non justifi√©e',
                '√âl√®ve ne s\'est pas pr√©sent√©',
                'Absence sans excuse',
                'No-show'
            ]
        ];

        $statusNotes = $notes[$status] ?? ['Note g√©n√©rique'];
        return $statusNotes[array_rand($statusNotes)];
    }

    /**
     * G√©n√©rer un feedback d'enseignant
     */
    private function generateTeacherFeedback()
    {
        $feedbacks = [
            '√âl√®ve tr√®s motiv√© et appliqu√©. Progression excellente.',
            'Bon travail sur la technique de base. Continuer dans cette direction.',
            '√âl√®ve en confiance, tr√®s bonne s√©ance aujourd\'hui.',
            'Am√©lioration notable depuis la derni√®re fois. Bravo !',
            'Technique en progression, attitude positive.',
            '√âl√®ve attentif aux conseils, tr√®s bon potentiel.',
            'S√©ance productive, objectifs atteints.',
            'Tr√®s bon niveau aujourd\'hui, continuer ainsi.',
            '√âl√®ve s√©rieux et motiv√©, excellente progression.',
            'Travail technique approfondi, tr√®s satisfait.'
        ];

        return $feedbacks[array_rand($feedbacks)];
    }

    /**
     * G√©n√©rer un avis d'√©tudiant
     */
    private function generateStudentReview()
    {
        $reviews = [
            'Excellent cours ! L\'enseignant est tr√®s p√©dagogue.',
            'Tr√®s satisfait de cette s√©ance, j\'ai beaucoup appris.',
            'Cours de qualit√©, je recommande vivement.',
            'Enseignant patient et comp√©tent, tr√®s bon cours.',
            'Progression visible, merci pour les conseils.',
            'Cours adapt√© √† mon niveau, parfait !',
            'Enseignant professionnel, s√©ance tr√®s instructive.',
            'Tr√®s bon cours, technique et p√©dagogie au top.',
            'Satisfait de la progression, cours de qualit√©.',
            'Enseignant √† l\'√©coute, excellente approche p√©dagogique.'
        ];

        return $reviews[array_rand($reviews)];
    }
}
