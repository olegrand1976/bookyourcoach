<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Club;
use App\Models\Teacher;
use App\Models\Student;
use App\Models\Lesson;
use App\Models\CourseType;
use App\Models\Location;
use App\Models\Payment;
use App\Models\Invoice;
use Carbon\Carbon;

class CompleteEnvironmentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        echo "üöÄ Cr√©ation d'un environnement complet de test pour BookYourCoach...\n\n";

        // V√©rifier que les donn√©es de base existent
        $this->checkBaseData();

        // Cr√©er l'environnement de cours complet
        $this->createCompleteLessonEnvironment();

        // Cr√©er des statistiques r√©alistes
        $this->createRealisticStatistics();

        // G√©n√©rer un rapport final
        $this->generateFinalReport();

        echo "\nüéâ Environnement complet cr√©√© avec succ√®s !\n";
        echo "üìä Vous pouvez maintenant tester toutes les fonctionnalit√©s du syst√®me.\n";
    }

    /**
     * V√©rifier que les donn√©es de base existent
     */
    private function checkBaseData()
    {
        echo "üîç V√©rification des donn√©es de base...\n";

        $requiredData = [
            'clubs' => Club::count(),
            'course_types' => CourseType::count(),
            'locations' => Location::count(),
            'teachers' => Teacher::count(),
            'students' => Student::count(),
            'users' => User::count()
        ];

        foreach ($requiredData as $type => $count) {
            if ($count === 0) {
                echo "‚ùå Aucun {$type} trouv√©. Veuillez d'abord ex√©cuter les seeders de base.\n";
                echo "   Commandes sugg√©r√©es :\n";
                echo "   - php artisan db:seed --class=ClubTestDataSeeder\n";
                echo "   - php artisan db:seed --class=DemoDataSeeder\n";
                return false;
            }
            echo "‚úÖ {$count} {$type} trouv√©s\n";
        }

        echo "\n";
        return true;
    }

    /**
     * Cr√©er l'environnement de cours complet
     */
    private function createCompleteLessonEnvironment()
    {
        echo "üìö Cr√©ation de l'environnement de cours complet...\n";

        // R√©cup√©rer les donn√©es existantes
        $clubs = Club::all();
        $courseTypes = CourseType::all();
        $locations = Location::all();
        $teachers = Teacher::with(['user', 'user.clubs'])->get();
        $students = Student::with(['user', 'user.clubs'])->get();

        // Organiser par club
        $teachersByClub = $this->organizeByClub($teachers);
        $studentsByClub = $this->organizeByClub($students);

        $totalLessons = 0;
        $totalPayments = 0;

        foreach ($clubs as $club) {
            echo "üèá Traitement du club : {$club->name}\n";
            
            $clubTeachers = $teachersByClub[$club->id] ?? collect();
            $clubStudents = $studentsByClub[$club->id] ?? collect();

            if ($clubTeachers->isEmpty() || $clubStudents->isEmpty()) {
                echo "   ‚ö†Ô∏è Pas assez d'enseignants ou d'√©tudiants pour ce club\n";
                continue;
            }

            // Cr√©er diff√©rents types de cours pour ce club
            $clubStats = $this->createClubLessons($club, $clubTeachers, $clubStudents, $courseTypes, $locations);
            
            $totalLessons += $clubStats['lessons'];
            $totalPayments += $clubStats['payments'];

            echo "   ‚úÖ {$clubStats['lessons']} cours cr√©√©s, {$clubStats['payments']} paiements\n";
        }

        echo "\nüìä R√©sum√© global :\n";
        echo "   - {$totalLessons} cours cr√©√©s au total\n";
        echo "   - {$totalPayments} paiements g√©n√©r√©s\n";
        echo "   - " . Lesson::where('status', 'completed')->count() . " cours termin√©s\n";
        echo "   - " . Lesson::where('status', 'confirmed')->count() . " cours confirm√©s\n";
        echo "   - " . Lesson::where('status', 'pending')->count() . " cours en attente\n";
        echo "   - " . Lesson::where('status', 'cancelled')->count() . " cours annul√©s\n";
        echo "   - " . Lesson::where('status', 'no_show')->count() . " absences\n\n";
    }

    /**
     * Organiser les utilisateurs par club
     */
    private function organizeByClub($users)
    {
        $organized = collect();
        
        $users->each(function ($user) use ($organized) {
            $user->user->clubs->each(function ($club) use ($user, $organized) {
                if (!$organized->has($club->id)) {
                    $organized->put($club->id, collect());
                }
                $organized->get($club->id)->push($user);
            });
        });

        return $organized;
    }

    /**
     * Cr√©er les cours pour un club sp√©cifique
     */
    private function createClubLessons($club, $teachers, $students, $courseTypes, $locations)
    {
        $lessonCount = 0;
        $paymentCount = 0;

        // 1. Cours individuels (60% des cours)
        $individualCount = rand(15, 25);
        for ($i = 0; $i < $individualCount; $i++) {
            $lesson = $this->createIndividualLesson($teachers, $students, $courseTypes, $locations);
            if ($lesson) {
                $lessonCount++;
                if ($lesson->status === 'completed' && rand(0, 100) > 20) {
                    $this->createPaymentForLesson($lesson, $lesson->student);
                    $paymentCount++;
                }
            }
        }

        // 2. Cours de groupe (25% des cours)
        $groupCount = rand(8, 15);
        for ($i = 0; $i < $groupCount; $i++) {
            $lesson = $this->createGroupLesson($teachers, $students, $courseTypes, $locations);
            if ($lesson) {
                $lessonCount++;
            }
        }

        // 3. Cours r√©currents (10% des cours)
        $recurringCount = rand(3, 8);
        for ($i = 0; $i < $recurringCount; $i++) {
            $lessons = $this->createRecurringSeries($teachers, $students, $courseTypes, $locations);
            $lessonCount += count($lessons);
        }

        // 4. √âv√©nements sp√©ciaux (5% des cours)
        $eventCount = rand(2, 5);
        for ($i = 0; $i < $eventCount; $i++) {
            $lesson = $this->createSpecialEvent($teachers, $students, $courseTypes, $locations);
            if ($lesson) {
                $lessonCount++;
            }
        }

        return [
            'lessons' => $lessonCount,
            'payments' => $paymentCount
        ];
    }

    /**
     * Cr√©er un cours individuel
     */
    private function createIndividualLesson($teachers, $students, $courseTypes, $locations)
    {
        $teacher = $teachers->random();
        $student = $students->random();
        $courseType = $courseTypes->random();
        $location = $locations->random();

        $isPast = rand(0, 1);
        $startTime = $isPast ? 
            Carbon::now()->subDays(rand(1, 180)) : 
            Carbon::now()->addDays(rand(1, 90));

        $startTime->setTime(rand(8, 19), rand(0, 3) * 15);
        $endTime = $startTime->copy()->addMinutes($courseType->duration ?? 60);

        $statuses = $isPast ? 
            ['completed', 'completed', 'completed', 'cancelled', 'no_show'] : 
            ['pending', 'confirmed', 'confirmed', 'confirmed'];

        $status = $statuses[array_rand($statuses)];
        $price = $courseType->price ?? rand(40, 80);

        $lesson = Lesson::create([
            'teacher_id' => $teacher->id,
            'student_id' => $student->id,
            'course_type_id' => $courseType->id,
            'location_id' => $location->id,
            'start_time' => $startTime,
            'end_time' => $endTime,
            'status' => $status,
            'price' => $price,
            'notes' => $this->generateLessonNotes($status, $courseType->name, 'individuel'),
            'teacher_feedback' => $status === 'completed' ? $this->generateTeacherFeedback() : null,
            'rating' => $status === 'completed' ? rand(3, 5) : null,
            'review' => $status === 'completed' && rand(0, 100) > 30 ? $this->generateStudentReview() : null,
        ]);

        $lesson->students()->attach($student->id, [
            'status' => $this->mapLessonStatusToStudentStatus($status),
            'price' => $price,
            'notes' => $lesson->notes
        ]);

        return $lesson;
    }

    /**
     * Mapper le statut du cours vers le statut de l'√©tudiant
     */
    private function mapLessonStatusToStudentStatus($lessonStatus)
    {
        $mapping = [
            'completed' => 'confirmed',
            'confirmed' => 'confirmed',
            'pending' => 'pending',
            'cancelled' => 'cancelled',
            'no_show' => 'cancelled' // no_show devient cancelled pour l'√©tudiant
        ];

        return $mapping[$lessonStatus] ?? 'pending';
    }

    /**
     * Cr√©er un cours de groupe
     */
    private function createGroupLesson($teachers, $students, $courseTypes, $locations)
    {
        $teacher = $teachers->random();
        $courseType = $courseTypes->random();
        $location = $locations->random();

        // S√©lectionner 2-4 √©tudiants pour le cours de groupe
        $groupStudents = $students->random(rand(2, min(4, $students->count())));
        $primaryStudent = $groupStudents->first();

        $isPast = rand(0, 1);
        $startTime = $isPast ? 
            Carbon::now()->subDays(rand(1, 180)) : 
            Carbon::now()->addDays(rand(1, 90));

        $startTime->setTime(rand(9, 17), rand(0, 3) * 15);
        $endTime = $startTime->copy()->addMinutes($courseType->duration ?? 60);

        $statuses = $isPast ? 
            ['completed', 'completed', 'completed', 'cancelled'] : 
            ['pending', 'confirmed', 'confirmed', 'confirmed'];

        $status = $statuses[array_rand($statuses)];
        $price = ($courseType->price ?? rand(40, 80)) * 0.8; // Prix r√©duit pour les cours de groupe

        $lesson = Lesson::create([
            'teacher_id' => $teacher->id,
            'student_id' => $primaryStudent->id,
            'course_type_id' => $courseType->id,
            'location_id' => $location->id,
            'start_time' => $startTime,
            'end_time' => $endTime,
            'status' => $status,
            'price' => $price,
            'notes' => $this->generateLessonNotes($status, $courseType->name, 'groupe'),
        ]);

        // Associer tous les √©tudiants du groupe au cours
        foreach ($groupStudents as $student) {
            $lesson->students()->attach($student->id, [
                'status' => $this->mapLessonStatusToStudentStatus($status),
                'price' => $price,
                'notes' => 'Cours de groupe - ' . $lesson->notes
            ]);
        }

        return $lesson;
    }

    /**
     * Cr√©er une s√©rie de cours r√©currents
     */
    private function createRecurringSeries($teachers, $students, $courseTypes, $locations)
    {
        $teacher = $teachers->random();
        $student = $students->random();
        $courseType = $courseTypes->random();
        $location = $locations->random();

        $seriesLength = rand(6, 10);
        $startDate = Carbon::now()->addDays(rand(1, 30));
        $startDate->setTime(rand(9, 17), rand(0, 3) * 15);

        $lessons = [];

        for ($week = 0; $week < $seriesLength; $week++) {
            $lessonDate = $startDate->copy()->addWeeks($week);
            $endDate = $lessonDate->copy()->addMinutes($courseType->duration ?? 60);

            $status = $week < 2 ? 'confirmed' : 'pending';

            $lesson = Lesson::create([
                'teacher_id' => $teacher->id,
                'student_id' => $student->id,
                'course_type_id' => $courseType->id,
                'location_id' => $location->id,
                'start_time' => $lessonDate,
                'end_time' => $endDate,
                'status' => $status,
                'price' => $courseType->price ?? 50,
                'notes' => "Cours r√©current - S√©ance " . ($week + 1) . "/{$seriesLength}",
            ]);

            $lesson->students()->attach($student->id, [
                'status' => $this->mapLessonStatusToStudentStatus($status),
                'price' => $lesson->price,
                'notes' => $lesson->notes
            ]);

            $lessons[] = $lesson;
        }

        return $lessons;
    }

    /**
     * Cr√©er un √©v√©nement sp√©cial
     */
    private function createSpecialEvent($teachers, $students, $courseTypes, $locations)
    {
        $teacher = $teachers->random();
        $courseType = $courseTypes->random();
        $location = $locations->random();

        $specialEvents = [
            'Comp√©tition de dressage',
            'Stage de saut d\'obstacles',
            'Cours de voltige',
            'D√©monstration √©questre',
            'Formation aux soins des chevaux',
            'Randonn√©e √©questre',
            'Cours de mar√©chalerie',
            'Formation s√©curit√©'
        ];

        $eventName = $specialEvents[array_rand($specialEvents)];
        $eventStudents = $students->random(rand(3, min(8, $students->count())));
        $primaryStudent = $eventStudents->first();

        $eventDate = Carbon::now()->addDays(rand(15, 90));
        $eventDate->setTime(10, 0);
        $eventEnd = $eventDate->copy()->addHours(3);

        $lesson = Lesson::create([
            'teacher_id' => $teacher->id,
            'student_id' => $primaryStudent->id,
            'course_type_id' => $courseType->id,
            'location_id' => $location->id,
            'start_time' => $eventDate,
            'end_time' => $eventEnd,
            'status' => 'confirmed',
            'price' => ($courseType->price ?? 50) * 2,
            'notes' => "√âv√©nement sp√©cial : {$eventName}",
        ]);

        // Associer tous les √©tudiants √† l'√©v√©nement
        foreach ($eventStudents as $student) {
            $lesson->students()->attach($student->id, [
                'status' => $this->mapLessonStatusToStudentStatus('confirmed'),
                'price' => $lesson->price * 0.7,
                'notes' => "Participation √† l'√©v√©nement : {$eventName}"
            ]);
        }

        return $lesson;
    }

    /**
     * Cr√©er des statistiques r√©alistes
     */
    private function createRealisticStatistics()
    {
        echo "üìà G√©n√©ration de statistiques r√©alistes...\n";

        // Mettre √† jour les statistiques des √©tudiants
        Student::all()->each(function ($student) {
            $completedLessons = $student->lessons()->where('status', 'completed')->count();
            $totalSpent = $student->lessons()->where('status', 'completed')->sum('price');
            
            $student->update([
                'total_lessons' => $completedLessons,
                'total_spent' => $totalSpent
            ]);
        });

        echo "‚úÖ Statistiques des √©tudiants mises √† jour\n";
    }

    /**
     * G√©n√©rer un rapport final
     */
    private function generateFinalReport()
    {
        echo "üìã G√©n√©ration du rapport final...\n\n";

        $stats = [
            'Clubs' => Club::count(),
            'Enseignants' => Teacher::count(),
            '√âtudiants' => Student::count(),
            'Types de cours' => CourseType::count(),
            'Lieux' => Location::count(),
            'Cours totaux' => Lesson::count(),
            'Cours termin√©s' => Lesson::where('status', 'completed')->count(),
            'Cours confirm√©s' => Lesson::where('status', 'confirmed')->count(),
            'Cours en attente' => Lesson::where('status', 'pending')->count(),
            'Cours annul√©s' => Lesson::where('status', 'cancelled')->count(),
            'Absences' => Lesson::where('status', 'no_show')->count(),
            'Paiements' => Payment::count(),
            'Cours de groupe' => Lesson::has('students', '>', 1)->count(),
            'Cours individuels' => Lesson::has('students', '=', 1)->count(),
        ];

        echo "üìä STATISTIQUES FINALES :\n";
        echo str_repeat("=", 50) . "\n";
        foreach ($stats as $label => $value) {
            printf("%-20s : %d\n", $label, $value);
        }
        echo str_repeat("=", 50) . "\n\n";

        // Statistiques par club
        echo "üèá STATISTIQUES PAR CLUB :\n";
        echo str_repeat("-", 50) . "\n";
        Club::all()->each(function ($club) {
            $teachers = $club->users()->wherePivot('role', 'teacher')->count();
            $students = $club->users()->wherePivot('role', 'student')->count();
            $lessons = Lesson::whereHas('teacher.user.clubs', function($query) use ($club) {
                $query->where('clubs.id', $club->id);
            })->count();
            
            printf("%-20s : %d enseignants, %d √©tudiants, %d cours\n", 
                   $club->name, $teachers, $students, $lessons);
        });
        echo str_repeat("-", 50) . "\n\n";

        echo "üéØ ENVIRONNEMENT PR√äT POUR LES TESTS !\n";
        echo "Vous pouvez maintenant tester :\n";
        echo "‚Ä¢ Dashboard des clubs avec statistiques r√©alistes\n";
        echo "‚Ä¢ Gestion des enseignants et √©tudiants\n";
        echo "‚Ä¢ Historique des cours et paiements\n";
        echo "‚Ä¢ Cours √† venir et planification\n";
        echo "‚Ä¢ Cours de groupe et √©v√©nements sp√©ciaux\n";
        echo "‚Ä¢ Syst√®me de notation et avis\n";
        echo "‚Ä¢ Rapports et analyses\n\n";
    }

    /**
     * Cr√©er un paiement pour un cours
     */
    private function createPaymentForLesson($lesson, $student)
    {
        $paymentMethods = ['card', 'bank_transfer', 'cash', 'paypal'];
        $paymentStatuses = ['succeeded', 'succeeded', 'succeeded', 'pending'];

        Payment::create([
            'lesson_id' => $lesson->id,
            'student_id' => $student->id,
            'amount' => $lesson->price,
            'currency' => 'EUR',
            'payment_method' => $paymentMethods[array_rand($paymentMethods)],
            'status' => $paymentStatuses[array_rand($paymentStatuses)],
            'processed_at' => $lesson->start_time->addDays(rand(0, 7)),
            'notes' => 'Paiement pour cours de ' . $lesson->courseType->name,
        ]);
    }

    /**
     * G√©n√©rer des notes de cours
     */
    private function generateLessonNotes($status, $courseType, $type = 'individuel')
    {
        $typePrefix = $type === 'groupe' ? 'Cours de groupe - ' : '';
        
        $notes = [
            'completed' => [
                'Excellent cours, progression visible',
                'Bon travail sur la technique',
                '√âl√®ve motiv√© et attentif',
                'Am√©lioration notable depuis la derni√®re s√©ance',
                'Cours productif, objectifs atteints',
                'Tr√®s bon niveau aujourd\'hui',
                '√âl√®ve en confiance, excellente s√©ance',
                'Travail technique approfondi',
                'Progression constante observ√©e',
                'S√©ance tr√®s satisfaisante'
            ],
            'confirmed' => [
                'Cours confirm√©',
                'Rendez-vous confirm√©',
                'S√©ance programm√©e',
                'Cours planifi√©',
                'Rendez-vous √©tabli'
            ],
            'pending' => [
                'En attente de confirmation',
                'Cours en cours de planification',
                'Rendez-vous √† confirmer',
                'S√©ance en attente',
                'Cours programm√©'
            ],
            'cancelled' => [
                'Cours annul√© par l\'√©l√®ve',
                'Annulation pour cause de maladie',
                'Cours report√©',
                'Annulation pour impr√©vu',
                'S√©ance annul√©e'
            ],
            'no_show' => [
                '√âl√®ve absent sans pr√©venir',
                'Absence non justifi√©e',
                '√âl√®ve ne s\'est pas pr√©sent√©',
                'Absence sans excuse',
                'No-show'
            ]
        ];

        $statusNotes = $notes[$status] ?? ['Note g√©n√©rique'];
        return $typePrefix . $statusNotes[array_rand($statusNotes)];
    }

    /**
     * G√©n√©rer un feedback d'enseignant
     */
    private function generateTeacherFeedback()
    {
        $feedbacks = [
            '√âl√®ve tr√®s motiv√© et appliqu√©. Progression excellente.',
            'Bon travail sur la technique de base. Continuer dans cette direction.',
            '√âl√®ve en confiance, tr√®s bonne s√©ance aujourd\'hui.',
            'Am√©lioration notable depuis la derni√®re fois. Bravo !',
            'Technique en progression, attitude positive.',
            '√âl√®ve attentif aux conseils, tr√®s bon potentiel.',
            'S√©ance productive, objectifs atteints.',
            'Tr√®s bon niveau aujourd\'hui, continuer ainsi.',
            '√âl√®ve s√©rieux et motiv√©, excellente progression.',
            'Travail technique approfondi, tr√®s satisfait.'
        ];

        return $feedbacks[array_rand($feedbacks)];
    }

    /**
     * G√©n√©rer un avis d'√©tudiant
     */
    private function generateStudentReview()
    {
        $reviews = [
            'Excellent cours ! L\'enseignant est tr√®s p√©dagogue.',
            'Tr√®s satisfait de cette s√©ance, j\'ai beaucoup appris.',
            'Cours de qualit√©, je recommande vivement.',
            'Enseignant patient et comp√©tent, tr√®s bon cours.',
            'Progression visible, merci pour les conseils.',
            'Cours adapt√© √† mon niveau, parfait !',
            'Enseignant professionnel, s√©ance tr√®s instructive.',
            'Tr√®s bon cours, technique et p√©dagogie au top.',
            'Satisfait de la progression, cours de qualit√©.',
            'Enseignant √† l\'√©coute, excellente approche p√©dagogique.'
        ];

        return $reviews[array_rand($reviews)];
    }
}
