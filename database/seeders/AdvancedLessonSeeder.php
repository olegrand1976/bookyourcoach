<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Club;
use App\Models\Teacher;
use App\Models\Student;
use App\Models\Lesson;
use App\Models\CourseType;
use App\Models\Location;
use App\Models\Payment;
use App\Models\Invoice;
use Carbon\Carbon;

class AdvancedLessonSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        echo "üéØ Cr√©ation d'un environnement de cours complet et r√©aliste...\n";

        // R√©cup√©rer les donn√©es existantes
        $clubs = Club::all();
        $courseTypes = CourseType::all();
        $locations = Location::all();
        
        if ($clubs->isEmpty() || $courseTypes->isEmpty() || $locations->isEmpty()) {
            echo "‚ùå Donn√©es manquantes. Veuillez d'abord ex√©cuter les seeders de base.\n";
            return;
        }

        // R√©cup√©rer les enseignants et √©tudiants par club
        $teachersByClub = $this->getTeachersByClub();
        $studentsByClub = $this->getStudentsByClub();

        echo "üìä Donn√©es organis√©es par club :\n";
        foreach ($teachersByClub as $clubId => $teachers) {
            $club = $clubs->find($clubId);
            $students = $studentsByClub[$clubId] ?? collect();
            echo "- Club '{$club->name}': {$teachers->count()} enseignants, {$students->count()} √©tudiants\n";
        }

        // Cr√©er des cours individuels
        $this->createIndividualLessons($teachersByClub, $studentsByClub, $courseTypes, $locations);

        // Cr√©er des cours de groupe
        $this->createGroupLessons($teachersByClub, $studentsByClub, $courseTypes, $locations);

        // Cr√©er des stages intensifs
        $this->createIntensiveCourses($teachersByClub, $studentsByClub, $courseTypes, $locations);

        // Cr√©er des cours r√©currents
        $this->createRecurringLessons($teachersByClub, $studentsByClub, $courseTypes, $locations);

        // Cr√©er des √©v√©nements sp√©ciaux
        $this->createSpecialEvents($teachersByClub, $studentsByClub, $courseTypes, $locations);

        echo "‚úÖ Environnement de cours complet cr√©√© avec succ√®s !\n";
    }

    /**
     * Organiser les enseignants par club
     */
    private function getTeachersByClub()
    {
        $teachersByClub = collect();
        
        Teacher::with(['user', 'user.clubs'])->get()->each(function ($teacher) use ($teachersByClub) {
            $teacher->user->clubs->each(function ($club) use ($teacher, $teachersByClub) {
                if (!$teachersByClub->has($club->id)) {
                    $teachersByClub->put($club->id, collect());
                }
                $teachersByClub->get($club->id)->push($teacher);
            });
        });

        return $teachersByClub;
    }

    /**
     * Organiser les √©tudiants par club
     */
    private function getStudentsByClub()
    {
        $studentsByClub = collect();
        
        Student::with(['user', 'user.clubs'])->get()->each(function ($student) use ($studentsByClub) {
            $student->user->clubs->each(function ($club) use ($student, $studentsByClub) {
                if (!$studentsByClub->has($club->id)) {
                    $studentsByClub->put($club->id, collect());
                }
                $studentsByClub->get($club->id)->push($student);
            });
        });

        return $studentsByClub;
    }

    /**
     * Cr√©er des cours individuels
     */
    private function createIndividualLessons($teachersByClub, $studentsByClub, $courseTypes, $locations)
    {
        echo "üë§ Cr√©ation des cours individuels...\n";

        $individualCourseTypes = $courseTypes->where('name', 'like', '%individuel%')
                                           ->orWhere('name', 'like', '%priv√©%')
                                           ->orWhere('name', 'like', '%personnel%');

        if ($individualCourseTypes->isEmpty()) {
            $individualCourseTypes = $courseTypes->take(2); // Prendre les 2 premiers si pas de cours individuels sp√©cifiques
        }

        $lessonCount = 0;
        $paymentCount = 0;

        foreach ($teachersByClub as $clubId => $teachers) {
            $students = $studentsByClub[$clubId] ?? collect();
            
            if ($students->isEmpty()) continue;

            // Cr√©er 20-30 cours individuels par club
            $lessonsToCreate = rand(20, 30);
            
            for ($i = 0; $i < $lessonsToCreate; $i++) {
                $teacher = $teachers->random();
                $student = $students->random();
                $courseType = $individualCourseTypes->random();
                $location = $locations->random();

                $lesson = $this->createLesson($teacher, $student, $courseType, $location, 'individual');
                
                if ($lesson) {
                    $lessonCount++;
                    
                    // Cr√©er un paiement pour 85% des cours termin√©s
                    if ($lesson->status === 'completed' && rand(0, 100) > 15) {
                        $this->createPaymentForLesson($lesson, $student);
                        $paymentCount++;
                    }
                }
            }
        }

        echo "‚úÖ {$lessonCount} cours individuels cr√©√©s, {$paymentCount} paiements\n";
    }

    /**
     * Cr√©er des cours de groupe
     */
    private function createGroupLessons($teachersByClub, $studentsByClub, $courseTypes, $locations)
    {
        echo "üë• Cr√©ation des cours de groupe...\n";

        $groupCourseTypes = $courseTypes->where('name', 'like', '%groupe%')
                                      ->orWhere('name', 'like', '%collectif%')
                                      ->orWhere('name', 'like', '%√©quipe%');

        if ($groupCourseTypes->isEmpty()) {
            $groupCourseTypes = $courseTypes->skip(2)->take(2); // Prendre d'autres types si pas de cours de groupe sp√©cifiques
        }

        $lessonCount = 0;

        foreach ($teachersByClub as $clubId => $teachers) {
            $students = $studentsByClub[$clubId] ?? collect();
            
            if ($students->count() < 2) continue; // Besoin d'au moins 2 √©tudiants pour un cours de groupe

            // Cr√©er 10-15 cours de groupe par club
            $lessonsToCreate = rand(10, 15);
            
            for ($i = 0; $i < $lessonsToCreate; $i++) {
                $teacher = $teachers->random();
                $courseType = $groupCourseTypes->random();
                $location = $locations->random();

                // S√©lectionner 2-4 √©tudiants pour le cours de groupe
                $groupStudents = $students->random(rand(2, min(4, $students->count())));
                $primaryStudent = $groupStudents->first();

                $lesson = $this->createLesson($teacher, $primaryStudent, $courseType, $location, 'group');
                
                if ($lesson) {
                    // Associer tous les √©tudiants du groupe au cours
                    foreach ($groupStudents as $student) {
                        $lesson->students()->attach($student->id, [
                            'status' => $lesson->status,
                            'price' => $lesson->price * 0.8, // Prix r√©duit pour les cours de groupe
                            'notes' => 'Cours de groupe - ' . $lesson->notes
                        ]);
                    }

                    $lessonCount++;
                }
            }
        }

        echo "‚úÖ {$lessonCount} cours de groupe cr√©√©s\n";
    }

    /**
     * Cr√©er des stages intensifs
     */
    private function createIntensiveCourses($teachersByClub, $studentsByClub, $courseTypes, $locations)
    {
        echo "üèÜ Cr√©ation des stages intensifs...\n";

        $intensiveCourseTypes = $courseTypes->where('name', 'like', '%stage%')
                                          ->orWhere('name', 'like', '%intensif%')
                                          ->orWhere('name', 'like', '%weekend%');

        if ($intensiveCourseTypes->isEmpty()) {
            $intensiveCourseTypes = $courseTypes->take(1); // Prendre un type si pas de stages sp√©cifiques
        }

        $lessonCount = 0;

        foreach ($teachersByClub as $clubId => $teachers) {
            $students = $studentsByClub[$clubId] ?? collect();
            
            if ($students->isEmpty()) continue;

            // Cr√©er 3-5 stages par club
            $stagesToCreate = rand(3, 5);
            
            for ($i = 0; $i < $stagesToCreate; $i++) {
                $teacher = $teachers->random();
                $courseType = $intensiveCourseTypes->random();
                $location = $locations->random();

                // Stage sur 2-3 jours cons√©cutifs
                $startDate = Carbon::now()->addDays(rand(10, 60));
                $startDate->setTime(9, 0); // D√©but √† 9h

                for ($day = 0; $day < rand(2, 3); $day++) {
                    $currentDate = $startDate->copy()->addDays($day);
                    
                    // 2-3 sessions par jour
                    for ($session = 0; $session < rand(2, 3); $session++) {
                        $sessionStart = $currentDate->copy()->addHours(9 + $session * 3);
                        $sessionEnd = $sessionStart->copy()->addHours(2); // Sessions de 2h

                        $student = $students->random();
                        
                        $lesson = Lesson::create([
                            'teacher_id' => $teacher->id,
                            'student_id' => $student->id,
                            'course_type_id' => $courseType->id,
                            'location_id' => $location->id,
                            'start_time' => $sessionStart,
                            'end_time' => $sessionEnd,
                            'status' => 'confirmed',
                            'price' => ($courseType->price ?? 60) * 1.5, // Prix major√© pour les stages
                            'notes' => "Stage intensif - Jour " . ($day + 1) . " - Session " . ($session + 1),
                        ]);

                        $lesson->students()->attach($student->id, [
                            'status' => 'confirmed',
                            'price' => $lesson->price,
                            'notes' => $lesson->notes
                        ]);

                        $lessonCount++;
                    }
                }
            }
        }

        echo "‚úÖ {$lessonCount} sessions de stages intensifs cr√©√©es\n";
    }

    /**
     * Cr√©er des cours r√©currents
     */
    private function createRecurringLessons($teachersByClub, $studentsByClub, $courseTypes, $locations)
    {
        echo "üîÑ Cr√©ation des cours r√©currents...\n";

        $lessonCount = 0;

        foreach ($teachersByClub as $clubId => $teachers) {
            $students = $studentsByClub[$clubId] ?? collect();
            
            if ($students->isEmpty()) continue;

            // Cr√©er des s√©ries de cours r√©currents pour quelques √©tudiants
            $studentsForRecurring = $students->random(min(5, $students->count()));
            
            foreach ($studentsForRecurring as $student) {
                $teacher = $teachers->random();
                $courseType = $courseTypes->random();
                $location = $locations->random();

                // Cr√©er une s√©rie de 8-12 cours hebdomadaires
                $seriesLength = rand(8, 12);
                $startDate = Carbon::now()->addDays(rand(1, 30));
                $startDate->setTime(rand(9, 17), rand(0, 3) * 15);

                for ($week = 0; $week < $seriesLength; $week++) {
                    $lessonDate = $startDate->copy()->addWeeks($week);
                    $endDate = $lessonDate->copy()->addMinutes($courseType->duration ?? 60);

                    $lesson = Lesson::create([
                        'teacher_id' => $teacher->id,
                        'student_id' => $student->id,
                        'course_type_id' => $courseType->id,
                        'location_id' => $location->id,
                        'start_time' => $lessonDate,
                        'end_time' => $endDate,
                        'status' => $week < 3 ? 'confirmed' : 'pending',
                        'price' => $courseType->price ?? 50,
                        'notes' => "Cours r√©current - S√©ance " . ($week + 1) . "/{$seriesLength}",
                    ]);

                    $lesson->students()->attach($student->id, [
                        'status' => $lesson->status,
                        'price' => $lesson->price,
                        'notes' => $lesson->notes
                    ]);

                    $lessonCount++;
                }
            }
        }

        echo "‚úÖ {$lessonCount} cours r√©currents cr√©√©s\n";
    }

    /**
     * Cr√©er des √©v√©nements sp√©ciaux
     */
    private function createSpecialEvents($teachersByClub, $studentsByClub, $courseTypes, $locations)
    {
        echo "üéâ Cr√©ation des √©v√©nements sp√©ciaux...\n";

        $specialEvents = [
            'Comp√©tition de dressage',
            'Stage de saut d\'obstacles',
            'Cours de voltige',
            'D√©monstration √©questre',
            'Formation aux soins des chevaux',
            'Randonn√©e √©questre',
            'Cours de mar√©chalerie',
            'Formation s√©curit√©'
        ];

        $lessonCount = 0;

        foreach ($teachersByClub as $clubId => $teachers) {
            $students = $studentsByClub[$clubId] ?? collect();
            
            if ($students->isEmpty()) continue;

            // Cr√©er 2-3 √©v√©nements sp√©ciaux par club
            $eventsToCreate = rand(2, 3);
            
            for ($i = 0; $i < $eventsToCreate; $i++) {
                $teacher = $teachers->random();
                $courseType = $courseTypes->random();
                $location = $locations->random();
                $eventName = $specialEvents[array_rand($specialEvents)];

                $eventDate = Carbon::now()->addDays(rand(15, 90));
                $eventDate->setTime(10, 0); // √âv√©nement √† 10h
                $eventEnd = $eventDate->copy()->addHours(4); // √âv√©nement de 4h

                // S√©lectionner plusieurs √©tudiants pour l'√©v√©nement
                $eventStudents = $students->random(rand(3, min(8, $students->count())));
                $primaryStudent = $eventStudents->first();

                $lesson = Lesson::create([
                    'teacher_id' => $teacher->id,
                    'student_id' => $primaryStudent->id,
                    'course_type_id' => $courseType->id,
                    'location_id' => $location->id,
                    'start_time' => $eventDate,
                    'end_time' => $eventEnd,
                    'status' => 'confirmed',
                    'price' => ($courseType->price ?? 50) * 2, // Prix major√© pour les √©v√©nements
                    'notes' => "√âv√©nement sp√©cial : {$eventName}",
                ]);

                // Associer tous les √©tudiants √† l'√©v√©nement
                foreach ($eventStudents as $student) {
                    $lesson->students()->attach($student->id, [
                        'status' => 'confirmed',
                        'price' => $lesson->price * 0.7, // Prix r√©duit pour les √©v√©nements de groupe
                        'notes' => "Participation √† l'√©v√©nement : {$eventName}"
                    ]);
                }

                $lessonCount++;
            }
        }

        echo "‚úÖ {$lessonCount} √©v√©nements sp√©ciaux cr√©√©s\n";
    }

    /**
     * Cr√©er un cours individuel
     */
    private function createLesson($teacher, $student, $courseType, $location, $type = 'individual')
    {
        // G√©n√©rer une date al√©atoire dans les 6 derniers mois ou 3 prochains mois
        $isPast = rand(0, 1);
        if ($isPast) {
            $startTime = Carbon::now()->subDays(rand(1, 180));
        } else {
            $startTime = Carbon::now()->addDays(rand(1, 90));
        }

        $startTime->setTime(rand(8, 19), rand(0, 3) * 15);
        $endTime = $startTime->copy()->addMinutes($courseType->duration ?? 60);

        $statuses = $isPast ? 
            ['completed', 'completed', 'completed', 'cancelled', 'no_show'] : 
            ['pending', 'confirmed', 'confirmed', 'confirmed'];

        $status = $statuses[array_rand($statuses)];
        $price = $courseType->price ?? rand(40, 80);

        // Ajuster le prix selon le type
        if ($type === 'group') {
            $price *= 0.8; // Prix r√©duit pour les cours de groupe
        }

        $lesson = Lesson::create([
            'teacher_id' => $teacher->id,
            'student_id' => $student->id,
            'course_type_id' => $courseType->id,
            'location_id' => $location->id,
            'start_time' => $startTime,
            'end_time' => $endTime,
            'status' => $status,
            'price' => $price,
            'notes' => $this->generateLessonNotes($status, $courseType->name, $type),
            'teacher_feedback' => $status === 'completed' ? $this->generateTeacherFeedback() : null,
            'rating' => $status === 'completed' ? rand(3, 5) : null,
            'review' => $status === 'completed' && rand(0, 100) > 30 ? $this->generateStudentReview() : null,
        ]);

        return $lesson;
    }

    /**
     * Cr√©er un paiement pour un cours
     */
    private function createPaymentForLesson($lesson, $student)
    {
        $paymentMethods = ['card', 'cash', 'transfer', 'check'];
        $paymentStatuses = ['completed', 'completed', 'completed', 'pending'];

        Payment::create([
            'lesson_id' => $lesson->id,
            'student_id' => $student->id,
            'amount' => $lesson->price,
            'payment_method' => $paymentMethods[array_rand($paymentMethods)],
            'payment_status' => $paymentStatuses[array_rand($paymentStatuses)],
            'payment_date' => $lesson->start_time->addDays(rand(0, 7)),
            'transaction_id' => 'TXN_' . strtoupper(uniqid()),
            'notes' => 'Paiement pour cours de ' . $lesson->courseType->name,
        ]);
    }

    /**
     * G√©n√©rer des notes de cours
     */
    private function generateLessonNotes($status, $courseType, $type = 'individual')
    {
        $typePrefix = $type === 'group' ? 'Cours de groupe - ' : '';
        
        $notes = [
            'completed' => [
                'Excellent cours, progression visible',
                'Bon travail sur la technique',
                '√âl√®ve motiv√© et attentif',
                'Am√©lioration notable depuis la derni√®re s√©ance',
                'Cours productif, objectifs atteints',
                'Tr√®s bon niveau aujourd\'hui',
                '√âl√®ve en confiance, excellente s√©ance',
                'Travail technique approfondi',
                'Progression constante observ√©e',
                'S√©ance tr√®s satisfaisante'
            ],
            'confirmed' => [
                'Cours confirm√©',
                'Rendez-vous confirm√©',
                'S√©ance programm√©e',
                'Cours planifi√©',
                'Rendez-vous √©tabli'
            ],
            'pending' => [
                'En attente de confirmation',
                'Cours en cours de planification',
                'Rendez-vous √† confirmer',
                'S√©ance en attente',
                'Cours programm√©'
            ],
            'cancelled' => [
                'Cours annul√© par l\'√©l√®ve',
                'Annulation pour cause de maladie',
                'Cours report√©',
                'Annulation pour impr√©vu',
                'S√©ance annul√©e'
            ],
            'no_show' => [
                '√âl√®ve absent sans pr√©venir',
                'Absence non justifi√©e',
                '√âl√®ve ne s\'est pas pr√©sent√©',
                'Absence sans excuse',
                'No-show'
            ]
        ];

        $statusNotes = $notes[$status] ?? ['Note g√©n√©rique'];
        return $typePrefix . $statusNotes[array_rand($statusNotes)];
    }

    /**
     * G√©n√©rer un feedback d'enseignant
     */
    private function generateTeacherFeedback()
    {
        $feedbacks = [
            '√âl√®ve tr√®s motiv√© et appliqu√©. Progression excellente.',
            'Bon travail sur la technique de base. Continuer dans cette direction.',
            '√âl√®ve en confiance, tr√®s bonne s√©ance aujourd\'hui.',
            'Am√©lioration notable depuis la derni√®re fois. Bravo !',
            'Technique en progression, attitude positive.',
            '√âl√®ve attentif aux conseils, tr√®s bon potentiel.',
            'S√©ance productive, objectifs atteints.',
            'Tr√®s bon niveau aujourd\'hui, continuer ainsi.',
            '√âl√®ve s√©rieux et motiv√©, excellente progression.',
            'Travail technique approfondi, tr√®s satisfait.'
        ];

        return $feedbacks[array_rand($feedbacks)];
    }

    /**
     * G√©n√©rer un avis d'√©tudiant
     */
    private function generateStudentReview()
    {
        $reviews = [
            'Excellent cours ! L\'enseignant est tr√®s p√©dagogue.',
            'Tr√®s satisfait de cette s√©ance, j\'ai beaucoup appris.',
            'Cours de qualit√©, je recommande vivement.',
            'Enseignant patient et comp√©tent, tr√®s bon cours.',
            'Progression visible, merci pour les conseils.',
            'Cours adapt√© √† mon niveau, parfait !',
            'Enseignant professionnel, s√©ance tr√®s instructive.',
            'Tr√®s bon cours, technique et p√©dagogie au top.',
            'Satisfait de la progression, cours de qualit√©.',
            'Enseignant √† l\'√©coute, excellente approche p√©dagogique.'
        ];

        return $reviews[array_rand($reviews)];
    }
}
