<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\Api\AuthControllerSimple;
use App\Http\Controllers\AdminController;
use App\Http\Controllers\Api\FileUploadController;
use App\Http\Controllers\Api\Teacher\DashboardController;
use App\Http\Controllers\Api\ClubDashboardController;
use App\Http\Controllers\Api\ClubController;

// Route de test avec authentification simple
Route::get('/test-auth', function () {
    return response()->json(['message' => 'Authentification requise']);
})->middleware('auth:sanctum');

// Routes publiques (CORS géré par config/cors.php)
Route::get('/activity-types', function() {
    return response()->json([
        'success' => true,
        'data' => App\Models\ActivityType::all()
    ]);
});

// Authentification
Route::post('/auth/register', [AuthControllerSimple::class, 'register']);
Route::post('/auth/login', [AuthControllerSimple::class, 'login']);
Route::post('/auth/forgot-password', [AuthControllerSimple::class, 'forgotPassword']);
Route::post('/auth/reset-password', [AuthControllerSimple::class, 'resetPassword']);
//Route::get('/auth/user-test', [AuthControllerSimple::class, 'userTest']);

// Route user protégée par Sanctum standard
Route::middleware('auth:sanctum')->get('/auth/user', [AuthControllerSimple::class, 'user']);

// Routes pour le calendrier enseignant
Route::get('/teacher/calendar', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        $calendarId = $request->query('calendar_id', 'personal');
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json([
                'success' => true,
                'events' => []
            ], 200);
        }
        
        // Récupérer les événements (tous les cours de l'enseignant pour l'instant)
        $events = \DB::table('lessons')
            ->leftJoin('users', 'lessons.student_id', '=', 'users.id')
            ->where('lessons.teacher_id', $teacher->id)
            ->select(
                'lessons.*',
                'users.name as student_name',
                'lessons.notes as title'
            )
            ->orderBy('lessons.start_time')
            ->get();
        
        return response()->json([
            'success' => true,
            'events' => $events
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/calendar: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::get('/teacher/students', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json([
                'success' => true,
                'students' => []
            ], 200);
        }
        
        // Récupérer les élèves de l'enseignant avec informations détaillées
        $students = \DB::table('students')
            ->join('users', 'students.user_id', '=', 'users.id')
            ->join('lessons', 'students.id', '=', 'lessons.student_id')
            ->leftJoin('clubs', 'students.club_id', '=', 'clubs.id')
            ->where('lessons.teacher_id', $teacher->id)
            ->select(
                'users.id',
                'users.name',
                'users.email',
                'students.level',
                'students.club_id',
                'clubs.name as club_name',
                \DB::raw('COUNT(DISTINCT lessons.id) as lessons_count'),
                \DB::raw('MAX(lessons.start_time) as last_lesson')
            )
            ->groupBy('users.id', 'users.name', 'users.email', 'students.level', 'students.club_id', 'clubs.name')
            ->get();
        
        return response()->json([
            'success' => true,
            'students' => $students
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/students: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

// Routes pour les clubs - voir groupe 'club' plus bas

// Détails d'un élève spécifique
Route::get('/teacher/students/{studentId}', function(Request $request, $studentId) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json(['error' => 'Profil enseignant non trouvé'], 404);
        }
        
        // Vérifier que l'élève appartient à cet enseignant
        $studentExists = \DB::table('students')
            ->join('lesson_student', 'students.id', '=', 'lesson_student.student_id')
            ->join('lessons', 'lesson_student.lesson_id', '=', 'lessons.id')
            ->where('students.user_id', $studentId)
            ->where('lessons.teacher_id', $teacher->id)
            ->exists();
        
        if (!$studentExists) {
            return response()->json(['error' => 'Élève non trouvé ou non autorisé'], 404);
        }
        
        // Récupérer les détails de l'élève
        $student = \DB::table('students')
            ->join('users', 'students.user_id', '=', 'users.id')
            ->leftJoin('clubs', 'students.club_id', '=', 'clubs.id')
            ->where('users.id', $studentId)
            ->select(
                'users.id',
                'users.name',
                'users.email',
                'students.level',
                'students.club_id',
                'clubs.name as club_name',
                'students.emergency_contacts',
                'students.medical_info'
            )
            ->first();
        
        // Récupérer les statistiques de l'élève
        $stats = \DB::table('lessons')
            ->join('lesson_student', 'lessons.id', '=', 'lesson_student.lesson_id')
            ->join('students', 'lesson_student.student_id', '=', 'students.id')
            ->where('students.user_id', $studentId)
            ->where('lessons.teacher_id', $teacher->id)
            ->select(
                \DB::raw('COUNT(*) as lessons_count'),
                \DB::raw('SUM(CASE WHEN lessons.status = "completed" THEN 1 ELSE 0 END) as completed_lessons'),
                \DB::raw('SUM(CASE WHEN lessons.status = "scheduled" AND lessons.start_time > NOW() THEN 1 ELSE 0 END) as upcoming_lessons'),
                \DB::raw('SUM(TIMESTAMPDIFF(MINUTE, lessons.start_time, lessons.end_time)) / 60 as total_hours')
            )
            ->first();
        
        // Récupérer les derniers cours
        $recentLessons = \DB::table('lessons')
            ->join('lesson_student', 'lessons.id', '=', 'lesson_student.lesson_id')
            ->join('students', 'lesson_student.student_id', '=', 'students.id')
            ->where('students.user_id', $studentId)
            ->where('lessons.teacher_id', $teacher->id)
            ->select('lessons.id', 'lessons.notes as title', 'lessons.start_time', 'lessons.status')
            ->orderBy('lessons.start_time', 'desc')
            ->limit(5)
            ->get();
        
        // Combiner les données
        $studentData = (array) $student;
        $studentData['lessons_count'] = $stats->lessons_count;
        $studentData['completed_lessons'] = $stats->completed_lessons;
        $studentData['upcoming_lessons'] = $stats->upcoming_lessons;
        $studentData['total_hours'] = round($stats->total_hours, 1);
        $studentData['recent_lessons'] = $recentLessons;
        
        return response()->json([
            'success' => true,
            'student' => $studentData
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/students/{id}: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

// Revenus de l'enseignant
Route::get('/teacher/earnings', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json(['error' => 'Profil enseignant non trouvé'], 404);
        }
        
        // Déterminer la période
        $period = $request->query('period', 'current_month');
        $startDate = null;
        $endDate = null;
        
        switch ($period) {
            case 'current_month':
                $startDate = now()->startOfMonth();
                $endDate = now()->endOfMonth();
                break;
            case 'last_month':
                $startDate = now()->subMonth()->startOfMonth();
                $endDate = now()->subMonth()->endOfMonth();
                break;
            case 'current_quarter':
                $startDate = now()->startOfQuarter();
                $endDate = now()->endOfQuarter();
                break;
            case 'current_year':
                $startDate = now()->startOfYear();
                $endDate = now()->endOfYear();
                break;
            case 'custom':
                $startDate = $request->query('start_date') ? \Carbon\Carbon::parse($request->query('start_date')) : null;
                $endDate = $request->query('end_date') ? \Carbon\Carbon::parse($request->query('end_date')) : null;
                break;
        }
        
        // Construire la requête de base
        $baseQuery = \DB::table('lessons')
            ->join('students', 'lessons.student_id', '=', 'students.id')
            ->join('users', 'students.user_id', '=', 'users.id')
            ->leftJoin('clubs', 'students.club_id', '=', 'clubs.id')
            ->leftJoin('course_types', 'lessons.course_type_id', '=', 'course_types.id')
            ->where('lessons.teacher_id', $teacher->id);
        
        // Appliquer les filtres de date
        if ($startDate) {
            $baseQuery->where('lessons.start_time', '>=', $startDate);
        }
        if ($endDate) {
            $baseQuery->where('lessons.start_time', '<=', $endDate);
        }
        
        // Statistiques générales
        $totalStats = $baseQuery->clone()
            ->select(
                \DB::raw('COUNT(DISTINCT lessons.id) as total_lessons'),
                \DB::raw('SUM(lessons.price) as total_earnings'),
                \DB::raw('AVG(lessons.price) as average_per_lesson')
            )
            ->first();
        
        // Revenus personnels (sans club)
        $personalStats = $baseQuery->clone()
            ->whereNull('students.club_id')
            ->select(
                \DB::raw('COUNT(DISTINCT lessons.id) as personal_lessons_count'),
                \DB::raw('SUM(lessons.price) as personal_earnings'),
                \DB::raw('AVG(lessons.price) as personal_average_per_lesson')
            )
            ->first();
        
        // Revenus par club
        $earningsByClub = $baseQuery->clone()
            ->whereNotNull('students.club_id')
            ->select(
                'clubs.id',
                'clubs.name',
                \DB::raw('COUNT(DISTINCT lessons.id) as lessons_count'),
                \DB::raw('SUM(lessons.price) as total_earnings'),
                \DB::raw('AVG(lessons.price) as average_per_lesson')
            )
            ->groupBy('clubs.id', 'clubs.name')
            ->get();
        
        // Revenus par élève
        $earningsByStudent = $baseQuery->clone()
            ->select(
                'users.id',
                'users.name',
                \DB::raw('COUNT(DISTINCT lessons.id) as lessons_count'),
                \DB::raw('SUM(lessons.price) as total_earnings'),
                \DB::raw('AVG(lessons.price) as average_per_lesson')
            )
            ->groupBy('users.id', 'users.name')
            ->orderBy('total_earnings', 'desc')
            ->get();
        
        // Revenus par type de cours
        $earningsByCourseType = $baseQuery->clone()
            ->select(
                'course_types.id',
                'course_types.name',
                \DB::raw('COUNT(DISTINCT lessons.id) as lessons_count'),
                \DB::raw('SUM(lessons.price) as total_earnings'),
                \DB::raw('AVG(lessons.price) as average_per_lesson')
            )
            ->groupBy('course_types.id', 'course_types.name')
            ->get();
        
        // Détail des cours
        $detailedLessons = $baseQuery->clone()
            ->select(
                'lessons.id',
                'lessons.start_time',
                'lessons.end_time',
                'lessons.status',
                'lessons.notes as title',
                'users.name as student_name',
                'course_types.name as course_type_name',
                'clubs.name as club_name',
                \DB::raw('TIMESTAMPDIFF(MINUTE, lessons.start_time, lessons.end_time) as duration'),
                'lesson_student.price as earnings'
            )
            ->orderBy('lessons.start_time', 'desc')
            ->limit(50)
            ->get();
        
        return response()->json([
            'success' => true,
            'total_earnings' => $totalStats->total_earnings || 0,
            'total_lessons' => $totalStats->total_lessons || 0,
            'average_per_lesson' => $totalStats->average_per_lesson || 0,
            'personal_earnings' => $personalStats->personal_earnings || 0,
            'personal_lessons_count' => $personalStats->personal_lessons_count || 0,
            'personal_average_per_lesson' => $personalStats->personal_average_per_lesson || 0,
            'club_earnings' => $earningsByClub->sum('total_earnings'),
            'earnings_by_club' => $earningsByClub,
            'earnings_by_student' => $earningsByStudent,
            'earnings_by_course_type' => $earningsByCourseType,
            'detailed_lessons' => $detailedLessons
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/earnings: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::get('/teacher/clubs', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json([
                'success' => true,
                'clubs' => []
            ], 200);
        }
        
        // Récupérer les clubs de l'enseignant
        $clubs = \DB::table('club_teachers')
            ->join('clubs', 'club_teachers.club_id', '=', 'clubs.id')
            ->where('club_teachers.teacher_id', $teacher->id)
            ->select('clubs.id', 'clubs.name', 'clubs.description')
            ->get();
        
        return response()->json([
            'success' => true,
            'clubs' => $clubs
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/clubs: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::post('/teacher/lessons', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json(['error' => 'Profil enseignant non trouvé'], 404);
        }
        
        // Validation des données
        $request->validate([
            'title' => 'required|string|max:255',
            'student_id' => 'required|integer',
            'start_time' => 'required|date',
            'end_time' => 'required|date|after:start_time',
            'duration' => 'required|integer|min:15|max:180',
            'type' => 'required|in:lesson,group,training,competition',
            'calendar_id' => 'required|string'
        ]);
        
        // Mappage des types vers les course_type_id
        $typeMapping = [
            'lesson' => 1,
            'group' => 2,
            'training' => 3,
            'competition' => 4
        ];
        
        // Créer le cours
        $lessonId = \DB::table('lessons')->insertGetId([
            'teacher_id' => $teacher->id,
            'student_id' => $request->student_id,
            'course_type_id' => $typeMapping[$request->type],
            'location_id' => 1, // Location par défaut
            'start_time' => $request->start_time,
            'end_time' => $request->end_time,
            'status' => 'scheduled',
            'notes' => $request->title,
            'price' => 45.00,
            'payment_status' => 'pending',
            'created_at' => now(),
            'updated_at' => now()
        ]);
        
        // Récupérer l'ID de l'étudiant depuis la table students
        $studentRecord = \DB::table('students')->where('user_id', $request->student_id)->first();
        
        if ($studentRecord) {
            // Lier l'étudiant au cours
            \DB::table('lesson_student')->insert([
                'lesson_id' => $lessonId,
                'student_id' => $studentRecord->id,
                'status' => 'confirmed',
                'price' => 45.00,
                'created_at' => now(),
                'updated_at' => now()
            ]);
        }
        
        return response()->json([
            'success' => true,
            'lesson_id' => $lessonId,
            'message' => 'Cours créé avec succès'
        ], 201);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/lessons: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::delete('/teacher/lessons/{id}', function(Request $request, $id) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer l'ID enseignant depuis la table teachers
        $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
        
        if (!$teacher) {
            return response()->json(['error' => 'Profil enseignant non trouvé'], 404);
        }
        
        // Vérifier que le cours appartient à l'enseignant
        $lesson = \DB::table('lessons')->where('id', $id)->where('teacher_id', $teacher->id)->first();
        
        if (!$lesson) {
            return response()->json(['error' => 'Cours non trouvé'], 404);
        }
        
        // Supprimer le cours
        \DB::table('lessons')->where('id', $id)->delete();
        
        return response()->json([
            'success' => true,
            'message' => 'Cours supprimé avec succès'
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/lessons/{id}: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::post('/teacher/calendar/sync-google', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        $calendarId = $request->input('calendar_id', 'personal');
        
        // TODO: Implémenter la synchronisation avec Google Calendar
        // Pour l'instant, on simule la synchronisation
        
        \Log::info("Synchronisation Google Calendar pour l'enseignant {$user->id}, calendrier: {$calendarId}");
        
        return response()->json([
            'success' => true,
            'message' => 'Synchronisation Google Calendar en cours...'
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /teacher/calendar/sync-google: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

// Routes pour le calendrier étudiant
Route::get('/student/calendar', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        $calendarId = $request->query('calendar_id', 'personal');
        
        // Récupérer les événements selon le calendrier sélectionné
        if ($calendarId === 'personal') {
            // Récupérer les cours réservés par l'étudiant
            $bookings = \DB::table('bookings')
                ->join('lessons', 'bookings.lesson_id', '=', 'lessons.id')
                ->join('users as teachers', 'lessons.teacher_id', '=', 'teachers.id')
                ->where('bookings.student_id', $user->id)
                ->select('lessons.*', 'teachers.name as teacher_name', 'bookings.id as booking_id')
                ->orderBy('lessons.start_time')
                ->get();
            
            // Récupérer les leçons disponibles
            $availableLessons = \DB::table('lessons')
                ->join('users as teachers', 'lessons.teacher_id', '=', 'teachers.id')
                ->where('lessons.start_time', '>', now())
                ->whereNotIn('lessons.id', function($query) use ($user) {
                    $query->select('lesson_id')
                        ->from('bookings')
                        ->where('student_id', $user->id);
                })
                ->select('lessons.*', 'teachers.name as teacher_name')
                ->orderBy('lessons.start_time')
                ->get();
            
            $events = $bookings->map(function($item) {
                return [
                    'id' => $item->id,
                    'title' => $item->title,
                    'start' => $item->start_time,
                    'end' => $item->end_time,
                    'type' => 'booking',
                    'teacher' => ['name' => $item->teacher_name],
                    'location' => $item->location,
                    'description' => $item->description
                ];
            })->concat($availableLessons->map(function($item) {
                return [
                    'id' => $item->id,
                    'title' => $item->title,
                    'start' => $item->start_time,
                    'end' => $item->end_time,
                    'type' => 'lesson',
                    'teacher' => ['name' => $item->teacher_name],
                    'location' => $item->location,
                    'description' => $item->description
                ];
            }));
        } else {
            // Récupérer les événements pour un club spécifique
            $events = \DB::table('lessons')
                ->join('users as teachers', 'lessons.teacher_id', '=', 'teachers.id')
                ->where('lessons.club_id', $calendarId)
                ->where('lessons.start_time', '>', now())
                ->select('lessons.*', 'teachers.name as teacher_name')
                ->orderBy('lessons.start_time')
                ->get()
                ->map(function($item) {
                    return [
                        'id' => $item->id,
                        'title' => $item->title,
                        'start' => $item->start_time,
                        'end' => $item->end_time,
                        'type' => 'lesson',
                        'teacher' => ['name' => $item->teacher_name],
                        'location' => $item->location,
                        'description' => $item->description
                    ];
                });
        }
        
        return response()->json([
            'success' => true,
            'events' => $events
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /student/calendar: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::get('/student/clubs', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer les clubs de l'étudiant
        $clubs = \DB::table('club_students')
            ->join('clubs', 'club_students.club_id', '=', 'clubs.id')
            ->where('club_students.student_id', $user->id)
            ->select('clubs.id', 'clubs.name', 'clubs.description')
            ->get();
        
        return response()->json([
            'success' => true,
            'clubs' => $clubs
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /student/clubs: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

Route::post('/student/calendar/sync-google', function(Request $request) {
    try {
        $token = $request->header('Authorization');
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Unauthenticated'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        $calendarId = $request->input('calendar_id', 'personal');
        
        // TODO: Implémenter la synchronisation avec Google Calendar
        // Pour l'instant, on simule la synchronisation
        
        \Log::info("Synchronisation Google Calendar pour l'étudiant {$user->id}, calendrier: {$calendarId}");
        
        return response()->json([
            'success' => true,
            'message' => 'Synchronisation Google Calendar en cours...'
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /student/calendar/sync-google: ' . $e->getMessage());
        return response()->json(['error' => 'Erreur interne'], 500);
    }
});

// Routes pour l'intégration Google Calendar
Route::get('/google-calendar/auth-url', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getAuthUrl']);
Route::post('/google-calendar/callback', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'handleCallback']);
Route::get('/google-calendar/calendars', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getCalendars']);
Route::post('/google-calendar/sync-events', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'syncEvents']);
Route::post('/google-calendar/events', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'createEvent']);
Route::put('/google-calendar/events/{eventId}', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'updateEvent']);
Route::delete('/google-calendar/events/{eventId}', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'deleteEvent']);
Route::get('/google-calendar/events', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getEvents']);

// Routes pour l'intégration Google Calendar des enseignants
Route::get('/teacher/google-calendar/auth-url', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getAuthUrl']);
Route::post('/teacher/google-calendar/callback', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'handleCallback']);
Route::get('/teacher/google-calendar/calendars', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getCalendars']);
Route::post('/teacher/google-calendar/sync-events', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'syncEvents']);

// Routes pour l'intégration Google Calendar des étudiants
Route::get('/student/google-calendar/auth-url', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getAuthUrl']);
Route::post('/student/google-calendar/callback', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'handleCallback']);
Route::get('/student/google-calendar/calendars', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'getCalendars']);
Route::post('/student/google-calendar/sync-events', [\App\Http\Controllers\Api\GoogleCalendarController::class, 'syncEvents']);

// Route de diagnostic pour l'erreur 500
Route::get('/auth/user-debug', function(Request $request) {
    try {
        \Log::info('Route /auth/user-debug appelée');
        
        $token = $request->header('Authorization');
        \Log::info('Token reçu: ' . ($token ? 'Présent' : 'Absent'));
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['error' => 'Token manquant ou format invalide'], 401);
        }
        
        $token = substr($token, 7);
        \Log::info('Token nettoyé: ' . substr($token, 0, 10) . '...');
        
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['error' => 'Token Sanctum non trouvé'], 401);
        }
        
        \Log::info('Token Sanctum trouvé pour user ID: ' . $personalAccessToken->tokenable_id);
        
        $user = $personalAccessToken->tokenable;
        \Log::info('User model récupéré: ' . $user->id);
        
        $userData = \DB::table('users')->where('id', $user->id)->first();
        
        if (!$userData) {
            return response()->json(['error' => 'User non trouvé en DB pour ID: ' . $user->id], 404);
        }
        
        return response()->json([
            'success' => true,
            'user_id' => $userData->id,
            'user_name' => $userData->name ?? 'Non renseigné',
            'user_email' => $userData->email,
            'user_role' => $userData->role,
            'user_phone' => $userData->phone ?? null,
            'user_city' => $userData->city ?? null,
            'user_country' => $userData->country ?? null
        ], 200);
        
    } catch (\Exception $e) {
        \Log::error('Erreur dans /auth/user-debug: ' . $e->getMessage());
        \Log::error('Stack trace: ' . $e->getTraceAsString());
        return response()->json([
            'error' => 'Erreur interne',
            'message' => $e->getMessage(),
            'file' => $e->getFile(),
            'line' => $e->getLine()
        ], 500);
    }
});

// Route de test pour isoler le problème
Route::get('/auth/user-simple', function() {
    return response()->json([
        'user' => [
            'id' => 2,
            'name' => 'Sophie Martin',
            'email' => 'sophie.martin@activibe.com',
            'role' => 'teacher',
            'is_active' => true,
        ]
    ], 200);
});

// Routes protégées avec authentification manuelle
Route::group([], function () {
    Route::post('/auth/logout', [AuthControllerSimple::class, 'logout']);
    
    // Routes utilisateurs
    Route::get('/users', function() {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        return response()->json([
            'users' => App\Models\User::all()
        ]);
    });
    
    // Routes profils
    Route::get('/profiles', function() {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        return response()->json([
            'profiles' => App\Models\Profile::all()
        ]);
    });
    
    Route::post('/profiles', function(Request $request) {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Validation des données
        $validator = \Illuminate\Support\Facades\Validator::make($request->all(), [
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string|max:500',
            'city' => 'nullable|string|max:100',
            'postal_code' => 'nullable|string|max:10',
            'country' => 'nullable|string|max:100',
        ]);
        
        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422);
        }
        
        $request->merge(['user_id' => $user->id]);
        
        $profile = App\Models\Profile::create($request->all());
        
        return response()->json([
            'message' => 'Profile created successfully',
            'profile' => $profile
        ], 201);
    });
    
    // Route pour le profil (utilisée par le frontend)
    Route::get('/profile', function() {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Récupérer les données de profil
        $profile = \DB::table('profiles')->where('user_id', $user->id)->first();
        
        $response = [
            'profile' => [
                'id' => $user->id,
                'name' => $user->name,
                'email' => $user->email,
                'phone' => $profile ? $profile->phone : $user->phone,
                'birth_date' => $profile ? $profile->date_of_birth : null,
                'address' => $profile ? $profile->address : null,
                'city' => $profile ? $profile->city : null,
                'postal_code' => $profile ? $profile->postal_code : null,
                'country' => $profile ? $profile->country : null,
                'status' => $user->status ?? 'active',
                'created_at' => $user->created_at,
                'updated_at' => $user->updated_at,
            ]
        ];
        
        // Ajouter les données spécifiques au rôle
        if ($user->role === 'teacher') {
            $teacher = \DB::table('teachers')->where('user_id', $user->id)->first();
            $response['teacher'] = $teacher ? [
                'id' => $teacher->id,
                'user_id' => $teacher->user_id,
                'specialties' => $teacher->specialties,
                'experience_years' => $teacher->experience_years,
                'certifications' => $teacher->certifications,
                'hourly_rate' => $teacher->hourly_rate,
                'bio' => $teacher->bio,
                'is_available' => $teacher->is_available,
                'created_at' => $teacher->created_at,
                'updated_at' => $teacher->updated_at,
            ] : null;
        }
        
        if ($user->role === 'student') {
            $student = \DB::table('students')->where('user_id', $user->id)->first();
            $response['student'] = $student ? [
                'id' => $student->id,
                'user_id' => $student->user_id,
                'level' => $student->level,
                'course_preferences' => $student->course_preferences,
                'emergency_contact' => $student->emergency_contact,
                'medical_notes' => $student->medical_notes,
                'created_at' => $student->created_at,
                'updated_at' => $student->updated_at,
            ] : null;
        }
        
        return response()->json($response, 200);
    });
    
    Route::put('/profile', function(Request $request) {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $user = $personalAccessToken->tokenable;
        
        // Validation des données
        $validator = \Illuminate\Support\Facades\Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|email|max:255',
            'phone' => 'nullable|string|max:20',
            'birth_date' => 'nullable|date',
            // Teacher specific
            'specialties' => 'nullable|string|max:500',
            'experience_years' => 'nullable|integer|min:0',
            'certifications' => 'nullable|string|max:500',
            'hourly_rate' => 'nullable|numeric|min:0',
            'bio' => 'nullable|string|max:1000',
            // Student specific
            'riding_level' => 'nullable|string|max:50',
            'course_preferences' => 'nullable|string|max:500',
            'emergency_contact' => 'nullable|string|max:255',
        ]);
        
        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422);
        }
        
        // Mettre à jour les données utilisateur de base
        \DB::table('users')->where('id', $user->id)->update([
            'name' => $request->name,
            'email' => $request->email,
            'updated_at' => now(),
        ]);
        
        // Mettre à jour ou créer le profil
        $profileData = [
            'user_id' => $user->id,
            'phone' => $request->phone,
            'date_of_birth' => $request->birth_date,
            'updated_at' => now(),
        ];
        
        $existingProfile = \DB::table('profiles')->where('user_id', $user->id)->first();
        
        if ($existingProfile) {
            \DB::table('profiles')->where('user_id', $user->id)->update($profileData);
        } else {
            $profileData['created_at'] = now();
            \DB::table('profiles')->insert($profileData);
        }
        
        // Mettre à jour les données spécifiques au rôle
        if ($user->role === 'teacher') {
            // Convertir les spécialités et certifications en JSON si elles sont des chaînes séparées par des virgules
            $specialties = $request->specialties;
            if (is_string($specialties) && strpos($specialties, ',') !== false) {
                $specialtiesArray = array_map('trim', explode(',', $specialties));
                $specialties = json_encode($specialtiesArray);
            }
            
            $certifications = $request->certifications;
            if (is_string($certifications) && strpos($certifications, ',') !== false) {
                $certificationsArray = array_map('trim', explode(',', $certifications));
                $certifications = json_encode($certificationsArray);
            }
            
            $teacherData = [
                'user_id' => $user->id,
                'specialties' => $specialties,
                'experience_years' => $request->experience_years,
                'certifications' => $certifications,
                'hourly_rate' => $request->hourly_rate,
                'bio' => $request->bio,
                'updated_at' => now(),
            ];
            
            $existingTeacher = \DB::table('teachers')->where('user_id', $user->id)->first();
            
            if ($existingTeacher) {
                \DB::table('teachers')->where('user_id', $user->id)->update($teacherData);
            } else {
                $teacherData['created_at'] = now();
                \DB::table('teachers')->insert($teacherData);
            }
        }
        
        if ($user->role === 'student') {
            $studentData = [
                'user_id' => $user->id,
                'level' => $request->riding_level,
                'course_preferences' => $request->course_preferences,
                'emergency_contact' => $request->emergency_contact,
                'updated_at' => now(),
            ];
            
            $existingStudent = \DB::table('students')->where('user_id', $user->id)->first();
            
            if ($existingStudent) {
                \DB::table('students')->where('user_id', $user->id)->update($studentData);
            } else {
                $studentData['created_at'] = now();
                \DB::table('students')->insert($studentData);
            }
        }
        
        return response()->json([
            'message' => 'Profile updated successfully'
        ], 200);
    });
    
    Route::get('/profiles/{id}', function($id) {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $profile = App\Models\Profile::with('user')->findOrFail($id);
        
        return response()->json([
            'profile' => $profile
        ]);
    });
    
    Route::put('/profiles/{id}', function(Request $request, $id) {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $profile = App\Models\Profile::findOrFail($id);
        $profile->update($request->all());
        
        return response()->json([
            'message' => 'Profile updated successfully',
            'profile' => $profile
        ]);
    });
    
    Route::delete('/profiles/{id}', function($id) {
        $token = request()->header('Authorization');
        
        if (!$token || !str_starts_with($token, 'Bearer ')) {
            return response()->json(['message' => 'Missing token'], 401);
        }
        
        $token = substr($token, 7);
        $personalAccessToken = \Laravel\Sanctum\PersonalAccessToken::findToken($token);
        
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $profile = App\Models\Profile::findOrFail($id);
        $profile->delete();
        
        return response()->json([
            'message' => 'Profile deleted successfully'
        ]);
    });
    
    // Upload avec authentification
    Route::post('/upload/logo', [FileUploadController::class, 'uploadLogo']);
});


// Route de test simple pour le dashboard enseignant
Route::get('/teacher/dashboard-simple', function() {
    return response()->json([
        'stats' => [
            'today_lessons' => 3,
            'active_students' => 12,
            'monthly_earnings' => 1250.50,
            'average_rating' => 4.8,
            'week_lessons' => 8,
            'week_hours' => 16.5,
            'week_earnings' => 420.75,
            'new_students' => 2,
        ],
        'upcomingLessons' => [
            [
                'id' => 1,
                'student_name' => 'Marie Dubois',
                'type' => 'Cours débutant',
                'start_time' => '2025-09-18 10:00:00',
                'end_time' => '2025-09-18 11:00:00',
                'status' => 'confirmed'
            ],
            [
                'id' => 2,
                'student_name' => 'Pierre Martin',
                'type' => 'Cours avancé',
                'start_time' => '2025-09-18 14:00:00',
                'end_time' => '2025-09-18 15:30:00',
                'status' => 'confirmed'
            ]
        ]
    ]);
});

// Routes Club
Route::prefix('club')->middleware('auth:sanctum')->group(function () {
    Route::get('/dashboard', [\App\Http\Controllers\Api\ClubController::class, 'dashboard']);
    Route::get('/teachers', [\App\Http\Controllers\Api\ClubController::class, 'teachers']);
    Route::get('/students', [\App\Http\Controllers\Api\ClubController::class, 'students']);
    Route::post('/add-teacher', [\App\Http\Controllers\Api\ClubController::class, 'addTeacher']);
    Route::post('/add-student', [\App\Http\Controllers\Api\ClubController::class, 'addStudent']);
    Route::put('/update', [\App\Http\Controllers\Api\ClubController::class, 'updateClub']);
    
        // Routes supplémentaires pour le profil club
        Route::get('/profile', [\App\Http\Controllers\Api\ClubController::class, 'getProfile']);
        Route::get('/custom-specialties', [\App\Http\Controllers\Api\ClubController::class, 'getCustomSpecialties']);
        Route::get('/disciplines', [\App\Http\Controllers\Api\ClubController::class, 'getDisciplines']);
        Route::post('/lessons', [\App\Http\Controllers\Api\ClubController::class, 'createLesson']);
        
        // Routes pour les tests de données
        Route::get('/test-stats', [\App\Http\Controllers\Api\ClubController::class, 'getTestStats']);
        Route::get('/test-clubs', [\App\Http\Controllers\Api\ClubController::class, 'getTestClubs']);
        Route::get('/test-club-details/{id}', [\App\Http\Controllers\Api\ClubController::class, 'getTestClubDetails']);
});

// Routes Enseignant - Temporairement sans middleware pour debug
Route::prefix('teacher')->group(function () {
    Route::get('/dashboard', [DashboardController::class, 'getDashboardData']);
    Route::get('/lessons', [DashboardController::class, 'getLessons']);
    Route::post('/lessons', [DashboardController::class, 'createLesson']);
    Route::put('/lessons/{id}', [DashboardController::class, 'updateLesson']);
    Route::delete('/lessons/{id}', [DashboardController::class, 'deleteLesson']);
    Route::get('/availabilities', [DashboardController::class, 'getAvailabilities']);
    Route::post('/availabilities', [DashboardController::class, 'createAvailability']);
    Route::put('/availabilities/{id}', [DashboardController::class, 'updateAvailability']);
    Route::delete('/availabilities/{id}', [DashboardController::class, 'deleteAvailability']);
    Route::get('/stats', [DashboardController::class, 'getStats']);
    Route::get('/students', [DashboardController::class, 'getStudents']);
});



// Routes admin (séparées pour la maintenabilité)
require __DIR__.'/admin.php';
