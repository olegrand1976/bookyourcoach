{"file":"admin-DfNl79WC.js","mappings":";;;;;;;;;;;;;;;;;;;AACI,MAAA,kCAA+B,OAAA,OAAA;;AAAA,MAAA,QAAA;AAG/B,oBAAe,aAAO;AAClB,MAAA,CAAA,iBAAkB;AACtB,WAAA,WAAA,QAAA;AAAA,EAGA;AACI,MAAA;AAGA;AAAA,IAAA,CAAI,iBAAW,IAAAA,aAAS,MAAA,UAAA,UAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAAA;AACpB,QAAA,CAAA,UAAM,SAAY;AAAA,YACd,YAAY;AAAA,QACZ,YAAA;AAAA,QACH,eAAA;AAAA,MAAA,CACL;AAAA;EAGA,SAAA,OAAc;AAGd,YAAI,MAAM,8BAA0B,KAAA;AAChC;AACA,MAAA,CAAA,iBAAkB,IAAAA,aAAA,MAAqB,UAAA,OAAA,CAAA,GAAA,MAAA,QAAA,UAAA;AAC3C,aAAA,WAAA,qBAAA;AAAA,IAGA;AAAkB,UACd,YAAY;AAAA,MACZ,YAAA;AAAA,MACH,eAAA;AAAA,IAAA,CACL;AAAA,EACJ;;","names":["__executeAsync"],"sources":["../../../../middleware/admin.ts"],"sourcesContent":["export default defineNuxtRouteMiddleware(async (to) => {\n    const authStore = useAuthStore()\n\n    // Si pas de token, rediriger vers login\n    if (!authStore.token) {\n        return navigateTo('/login')\n    }\n\n    // Vérifier que l'utilisateur est toujours valide côté serveur\n    try {\n        await authStore.fetchUser()\n\n        // Vérifier que l'utilisateur est admin\n        if (!authStore.isAdmin) {\n            throw createError({\n                statusCode: 403,\n                statusMessage: 'Accès refusé - Droits administrateur requis'\n            })\n        }\n    } catch (error: any) {\n        // Token invalide ou erreur serveur\n        console.error('Erreur vérification admin:', error)\n\n        // Si erreur 401, token expiré\n        if (error.response?.status === 401) {\n            await authStore.logout()\n            return navigateTo('/login?expired=true')\n        }\n\n        // Autre erreur, accès refusé\n        throw createError({\n            statusCode: 403,\n            statusMessage: 'Accès refusé - Droits administrateur requis'\n        })\n    }\n})\n"],"version":3}