{"file":"login-DXYFCpQg.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAwFA,UAAM,YAAY,aAAY;AACf,cAAS;AAQxB,UAAM,OAAO,SAAS;AAAA,MACpB,OAAO;AAAA,MACP,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC;AAED,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,QAAQ,IAAI,EAAE;AACpB,UAAM,mBAAmB,IAAI,CAAA,CAAE;AAkF/B,gBAAY,MAAM;AAChB,UAAI,UAAU,iBAAiB;AAC7B,YAAI,UAAU,SAAS;AACrB,qBAAW,QAAQ;AAAA,QACrB,WAAW,UAAU,WAAW;AAC9B,qBAAW,oBAAoB;AAAA,QACjC,WAAW,UAAU,QAAQ;AAC3B,qBAAW,iBAAiB;AAAA,QAC9B,WAAW,UAAU,WAAW;AAC9B,qBAAW,oBAAoB;AAAA,QACjC,OAAO;AACL,qBAAW,YAAY;AAAA,QACzB;AAAA,MACF;AAAA,IACF,CAAC;;;AAxMM,YAAA,OAAAA,eAAAC,WAAA,EAAA,OAAM,6BAAyB,MAAA,CAAA,CAAA,qRAAA;;QAShB,IAAG;AAAA,QAAY,OAAM;AAAA;yBAA/B,CAEW,GAAAC,QAAAC,UAAA,aAAA;;;;;8BAF4E,mBAEvF;AAAA;;;;;;;QAIU,IAAG;AAAA,QAAoB,OAAM;AAAA;yBAAvC,CAEW,GAAAD,QAAAC,UAAA,aAAA;;;;;8BAFkF,+BAE7F;AAAA;;;;;0KAQ6BC,cAAA,SAAAC,MAAA,IAAA,EAAK,KAAK,oXAMPD,cAAA,SAAAC,MAAA,IAAA,EAAK,QAAQ,4ZASVC,sBAAA,MAAA,QAAAD,MAAA,IAAA,EAAK,QAAQ,IAAbE,gBAAAF,MAAA,IAAA,EAAK,UAAQ,IAAA,IAAbA,MAAA,IAAA,EAAK,QAAQ,IAAA,aAAA,6YAefA,MAAA,OAAA,CAAO,IAAA,cAAA;UAE1BA,MAAA,OAAA,GAAO;;;;;;AAMZ,UAAAA,MAAA,gBAAA,EAAiB,SAAM,GAAA;;AAGEG,sBAAAH,MAAA,gBAAA,IAAnB,oBAAe;sCACrB,eAAe,CAAA,OAAA;AAAA;;;;;UAOfA,MAAA,KAAA,GAAK;8HAETA,MAAA,KAAA,CAAK,CAAA,cAAA;AAAA;;;;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps","_push","_parent","_ssrRenderAttr","_unref","_ssrIncludeBooleanAttr","_ssrLooseContain","_ssrRenderList"],"sources":["../../../../pages/login.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gray-50\">\n    <div class=\"flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div class=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Connexion\n          </h2>\n          <p class=\"mt-2 text-center text-sm text-gray-700\">\n            Pas encore de compte ?\n            <NuxtLink to=\"/register\" class=\"font-medium text-blue-400 bg-blue-600:text-yellow-600\">\n              Créer un compte\n            </NuxtLink>\n          </p>\n          <p class=\"mt-1 text-center text-sm text-gray-600\">\n            Vous êtes enseignant ?\n            <NuxtLink to=\"/register-teacher\" class=\"font-medium text-emerald-600 hover:text-emerald-500\">\n              S'inscrire comme enseignant\n            </NuxtLink>\n          </p>\n        </div>\n\n        <form class=\"mt-8 space-y-6\" @submit.prevent=\"handleLogin\">\n          <div class=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label for=\"email\" class=\"sr-only\">Email</label>\n              <input id=\"email\" v-model=\"form.email\" name=\"email\" type=\"email\" autocomplete=\"email\" required\n                class=\"relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Adresse email\" />\n            </div>\n            <div>\n              <label for=\"password\" class=\"sr-only\">Mot de passe</label>\n              <input id=\"password\" v-model=\"form.password\" name=\"password\" type=\"password\" autocomplete=\"current-password\"\n                required\n                class=\"relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Mot de passe\" />\n            </div>\n          </div>\n\n          <div class=\"flex items-center justify-between\">\n            <div class=\"flex items-center\">\n              <input id=\"remember-me\" v-model=\"form.remember\" name=\"remember-me\" type=\"checkbox\"\n                class=\"h-4 w-4 text-blue-400 focus:ring-blue-500 border-gray-300 rounded\" />\n              <label for=\"remember-me\" class=\"ml-2 block text-sm text-gray-900\">\n                Se souvenir de moi\n              </label>\n            </div>\n\n            <div class=\"text-sm\">\n              <a href=\"#\" class=\"font-medium text-blue-400 bg-blue-600:text-yellow-600\">\n                Mot de passe oublié ?\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <button type=\"submit\" :disabled=\"loading\"\n              class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-500 bg-blue-600:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\">\n              <span v-if=\"loading\">Connexion en cours...</span>\n              <span v-else>Connexion</span>\n            </button>\n          </div>\n\n          <!-- Messages d'erreur de validation -->\n          <div v-if=\"validationErrors.length > 0\" class=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\n            <div class=\"text-sm text-yellow-700\">\n              <ul class=\"list-disc list-inside\">\n                <li v-for=\"validationError in validationErrors\" :key=\"validationError\">\n                  {{ validationError }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- Messages d'erreur -->\n          <div v-if=\"error\" class=\"bg-red-50 border border-red-200 rounded-md p-4\">\n            <div class=\"text-sm text-red-600\">\n              {{ error }}\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\n\nconst authStore = useAuthStore()\nconst router = useRouter()\n\n// Fonction toast simple\nconst showToast = (message, type = 'info') => {\n  console.log(`[${type.toUpperCase()}] ${message}`)\n  // TODO: Implémenter un vrai système de toast\n}\n\nconst form = reactive({\n  email: '',\n  password: '',\n  remember: false\n})\n\nconst loading = ref(false)\nconst error = ref('')\nconst validationErrors = ref([])\n\n// Fonction de validation renforcée\nconst validateForm = () => {\n  const errors = []\n\n  if (!form.email) {\n    errors.push('Email requis')\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) {\n    errors.push('Format email invalide')\n  }\n\n  if (!form.password) {\n    errors.push('Mot de passe requis')\n  } else if (form.password.length < 6) {\n    errors.push('Mot de passe trop court (minimum 6 caractères)')\n  }\n\n  return errors\n}\n\nconst handleLogin = async () => {\n  loading.value = true\n  error.value = ''\n  validationErrors.value = []\n\n  // Validation côté client\n  const clientErrors = validateForm()\n  if (clientErrors.length > 0) {\n    validationErrors.value = clientErrors\n    loading.value = false\n    return\n  }\n\n  try {\n    await authStore.login({\n      email: form.email,\n      password: form.password\n    })\n\n    showToast('Connexion réussie', 'success')\n\n    // Rediriger selon le rôle (admin en priorité)\n    if (authStore.isAdmin) {\n      await navigateTo('/admin')\n    } else if (authStore.isTeacher) {\n      await navigateTo('/teacher/dashboard')\n    } else if (authStore.isClub) {\n      await navigateTo('/club/dashboard')\n    } else if (authStore.isStudent) {\n      await navigateTo('/student/dashboard')\n    } else {\n      await navigateTo('/dashboard')\n    }\n  } catch (err) {\n    console.error('Erreur de connexion complète:', err)\n    console.error('Response data:', err.response?.data)\n    console.error('Response status:', err.response?.status)\n    console.error('URL de base API:', useRuntimeConfig().public.apiBase)\n\n    let errorMessage = 'Une erreur est survenue'\n\n    if (err.response?.data?.message) {\n      errorMessage = err.response.data.message\n    } else if (err.code === 'ECONNREFUSED' || err.message.includes('Network Error')) {\n      errorMessage = 'Impossible de se connecter au serveur. Vérifiez que l\\'API est accessible.'\n    } else if (err.response?.status === 422) {\n      errorMessage = 'Informations de connexion invalides'\n    } else if (err.response?.status === 401) {\n      errorMessage = 'Email ou mot de passe incorrect'\n    } else {\n      errorMessage = `Erreur: ${err.message || 'Erreur inconnue'}`\n    }\n\n    error.value = errorMessage\n    showToast('Erreur de connexion', 'error')\n  } finally {\n    loading.value = false\n  }\n}\n\n// Rediriger si déjà connecté (admin en priorité)\nwatchEffect(() => {\n  if (authStore.isAuthenticated) {\n    if (authStore.isAdmin) {\n      navigateTo('/admin')\n    } else if (authStore.isTeacher) {\n      navigateTo('/teacher/dashboard')\n    } else if (authStore.isClub) {\n      navigateTo('/club/dashboard')\n    } else if (authStore.isStudent) {\n      navigateTo('/student/dashboard')\n    } else {\n      navigateTo('/dashboard')\n    }\n  }\n})\n</script>\n"],"version":3}