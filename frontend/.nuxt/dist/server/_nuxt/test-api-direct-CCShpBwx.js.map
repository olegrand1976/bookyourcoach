{"version":3,"file":"test-api-direct-CCShpBwx.js","sources":["../../../../pages/test-api-direct.vue"],"sourcesContent":["<template>\n    <div class=\"p-8\">\n        <h1 class=\"text-2xl font-bold mb-4\">üîß Test Direct API</h1>\n\n        <div class=\"bg-gray-100 p-4 rounded mb-4\">\n            <h2 class=\"text-lg font-semibold mb-2\">Configuration</h2>\n            <p><strong>API Base:</strong> {{ config.public.apiBase }}</p>\n            <p><strong>Endpoint:</strong> /auth/login</p>\n        </div>\n\n        <div class=\"space-y-2 mb-4\">\n            <button @click=\"testDirectAPI\" class=\"bg-blue-500 text-white px-4 py-2 rounded mr-2\">Test API\n                Direct</button>\n            <button @click=\"testWithAxios\" class=\"bg-green-500 text-white px-4 py-2 rounded mr-2\">Test avec\n                Axios</button>\n            <button @click=\"testWithFetch\" class=\"bg-purple-500 text-white px-4 py-2 rounded\">Test avec Fetch</button>\n        </div>\n\n        <div class=\"bg-black text-green-400 p-4 rounded font-mono text-sm max-h-96 overflow-y-auto\">\n            <div v-for=\"log in logs\" :key=\"log.id\">{{ log.message }}</div>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport axios from 'axios'\n\nconst config = useRuntimeConfig()\nconst { $api } = useNuxtApp()\n\nconst logs = ref([])\nlet logId = 0\n\nfunction addLog(message) {\n    logs.value.push({\n        id: logId++,\n        message: `[${new Date().toLocaleTimeString()}] ${message}`\n    })\n}\n\nasync function testDirectAPI() {\n    addLog('üîß Test avec $api (plugin Nuxt)...')\n    try {\n        const response = await $api.post('/auth/login', {\n            email: 'admin.secours@bookyourcoach.com',\n            password: 'secours123'\n        })\n        addLog(`‚úÖ Succ√®s: ${response.data.user.role}`)\n    } catch (error) {\n        addLog(`‚ùå Erreur $api: ${error.message}`)\n        if (error.response) {\n            addLog(`   Status: ${error.response.status}`)\n            addLog(`   Data: ${JSON.stringify(error.response.data)}`)\n        }\n    }\n}\n\nasync function testWithAxios() {\n    addLog('üîß Test avec Axios direct...')\n    try {\n        const response = await axios.post(`${config.public.apiBase}/auth/login`, {\n            email: 'admin.secours@bookyourcoach.com',\n            password: 'secours123'\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        })\n        addLog(`‚úÖ Succ√®s Axios: ${response.data.user.role}`)\n    } catch (error) {\n        addLog(`‚ùå Erreur Axios: ${error.message}`)\n        if (error.response) {\n            addLog(`   Status: ${error.response.status}`)\n            addLog(`   Data: ${JSON.stringify(error.response.data)}`)\n        }\n    }\n}\n\nasync function testWithFetch() {\n    addLog('üîß Test avec Fetch API...')\n    try {\n        const response = await fetch(`${config.public.apiBase}/auth/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                email: 'admin.secours@bookyourcoach.com',\n                password: 'secours123'\n            })\n        })\n\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`)\n        }\n\n        const data = await response.json()\n        addLog(`‚úÖ Succ√®s Fetch: ${data.user.role}`)\n    } catch (error) {\n        addLog(`‚ùå Erreur Fetch: ${error.message}`)\n    }\n}\n\nonMounted(() => {\n    addLog('üöÄ Page de test API charg√©e')\n    addLog(`üåê API Base: ${config.public.apiBase}`)\n})\n</script>\n"],"names":["_ssrRenderAttrs","_mergeProps","_unref","_ssrRenderList","_ssrInterpolate"],"mappings":";;;;;;;;;;;;;;;;;;AA2BA,UAAM,SAAS,iBAAgB;AAC/B,UAAM,EAAE,KAAI,IAAK,WAAU;AAE3B,UAAM,OAAO,IAAI,CAAA,CAAE;;mBA7BVA,eAAAC,WAAA,EAAA,OAAM,MAAK,GAAA,MAAA,CAAA,gNAKyBC,MAAA,MAAA,EAAO,OAAO,OAAO;AAanCC,oBAAAD,MAAA,IAAA,IAAP,QAAG;AAA2B,cAAA,QAAAE,eAAA,IAAI,OAAO,CAAA,QAAA;AAAA;;;;;;;;;;;"}