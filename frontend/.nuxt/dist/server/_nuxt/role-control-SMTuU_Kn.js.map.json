{"file":"role-control-SMTuU_Kn.js","mappings":";;;;;;;;;;;;;;;;;AAAA,MAAA,cAAe,0BAA0B,CAAC,OAAO;;AAC7C,QAAM,YAAY,aAAA;AAGlB,MAAI,CAAC,UAAU,iBAAiB;AAC5B,UAAM,YAAY;AAAA,MACd,YAAY;AAAA,MACZ,eAAe;AAAA,IAAA,CAClB;AAAA,EACL;AAGA,QAAM,eAAe,GAAG,KAAK;AAE7B,MAAI,kBAAgB,eAAU,SAAV,mBAAgB,UAAS,cAAc;AAEvD,YAAQ,KAAK,oCAAoC,GAAG,IAAI,mBAAmB,YAAY,wBAAuB,eAAU,SAAV,mBAAgB,IAAI,EAAE;AAEpI,UAAM,YAAY;AAAA,MACd,YAAY;AAAA,MACZ,eAAe;AAAA,IAAA,CAClB;AAAA,EACL;AAGA,QAAM,sBAAsB,GAAG,KAAK;AAEpC,MAAI,uBAAuB,oBAAoB,SAAS,GAAG;AAEvD,UAAM,kBAAkB,oBAAmB,eAAU,SAAV,mBAAgB,IAAI;AAC/D,UAAM,oBAAoB,oBAAoB;AAAA,MAAM,CAAA,eAChD,gBAAgB,SAAS,UAAU;AAAA,IAAA;AAGvC,QAAI,CAAC,mBAAmB;AACpB,YAAM,YAAY;AAAA,QACd,YAAY;AAAA,QACZ,eAAe;AAAA,MAAA,CAClB;AAAA,IACL;AAAA,EACJ;AACJ,CAAC;AAGD,SAAS,mBAAmB,MAAoC;AAC5D,UAAQ,MAAA;AAAA,IACJ,KAAK;AACD,aAAO,CAAC,QAAQ,SAAS,UAAU,gBAAgB,iBAAiB;AAAA,IACxE,KAAK;AACD,aAAO,CAAC,QAAQ,SAAS,kBAAkB,eAAe;AAAA,IAC9D,KAAK;AACD,aAAO,CAAC,QAAQ,gBAAgB,cAAc;AAAA,IAClD;AACI,aAAO,CAAA;AAAA,EAAC;AAEpB;","names":[],"sources":["../../../../middleware/role-control.ts"],"sourcesContent":["export default defineNuxtRouteMiddleware((to) => {\n    const authStore = useAuthStore()\n\n    // Vérifier l'authentification\n    if (!authStore.isAuthenticated) {\n        throw createError({\n            statusCode: 401,\n            statusMessage: 'Authentification requise'\n        })\n    }\n\n    // Contrôle d'accès par rôle\n    const requiredRole = to.meta.requiresRole as string\n\n    if (requiredRole && authStore.user?.role !== requiredRole) {\n        // Log de tentative d'accès non autorisé (côté client)\n        console.warn(`Tentative d'accès non autorisé à ${to.path} - Rôle requis: ${requiredRole}, Rôle utilisateur: ${authStore.user?.role}`)\n\n        throw createError({\n            statusCode: 403,\n            statusMessage: 'Accès non autorisé pour ce rôle'\n        })\n    }\n\n    // Contrôle d'accès par permissions spécifiques\n    const requiredPermissions = to.meta.requiresPermissions as string[]\n\n    if (requiredPermissions && requiredPermissions.length > 0) {\n        // Vérifier si l'utilisateur a toutes les permissions requises\n        const userPermissions = getUserPermissions(authStore.user?.role)\n        const hasAllPermissions = requiredPermissions.every(permission =>\n            userPermissions.includes(permission)\n        )\n\n        if (!hasAllPermissions) {\n            throw createError({\n                statusCode: 403,\n                statusMessage: 'Permissions insuffisantes'\n            })\n        }\n    }\n})\n\n// Fonction helper pour obtenir les permissions selon le rôle\nfunction getUserPermissions(role: string | undefined): string[] {\n    switch (role) {\n        case 'admin':\n            return ['read', 'write', 'delete', 'manage_users', 'manage_settings']\n        case 'teacher':\n            return ['read', 'write', 'manage_lessons', 'view_students']\n        case 'student':\n            return ['read', 'book_lessons', 'view_profile']\n        default:\n            return []\n    }\n}\n"],"version":3}