import { useAuthStore } from '~/stores/auth'

export default defineNuxtPlugin(async () => {
    const authStore = useAuthStore()

    // Initialisation avec v√©rification du token
    if (process.client) {
        // console.log('üîµ Plugin auth: c√¥t√© client')
        await authStore.initializeAuth()
    } else {
        // console.log('üî¥ Plugin auth: c√¥t√© serveur')
        // C√¥t√© serveur, essayer de r√©cup√©rer le token depuis les cookies
        const tokenCookie = useCookie('auth-token')
        // console.log('üç™ Token cookie:', tokenCookie.value ? 'pr√©sent' : 'absent')
        
        if (tokenCookie.value) {
            authStore.token = tokenCookie.value
            authStore.isAuthenticated = true
            // console.log('‚úÖ Authentification c√¥t√© serveur activ√©e')
            
            // Essayer de r√©cup√©rer les donn√©es utilisateur depuis l'API
            try {
                const config = useRuntimeConfig()
                // console.log('üåê Appel API:', `${config.public.apiBase}/auth/user`)
                const response = await $fetch(`${config.public.apiBase}/auth/user-test`, {
                    headers: {
                        'Authorization': `Bearer ${tokenCookie.value}`
                    }
                })
                
                if (response.user) {
                    authStore.user = response.user
                    // console.log('üë§ Utilisateur charg√©:', response.user.email)
                }
            } catch (error) {
                // console.warn('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur c√¥t√© serveur:', error)
                // En cas d'erreur, nettoyer l'authentification
                authStore.token = null
                authStore.isAuthenticated = false
                authStore.user = null
            }
        } else {
            // console.log('‚ùå Pas de token cookie c√¥t√© serveur')
        }
    }

    return {
        provide: {
            authStore
        }
    }
})
