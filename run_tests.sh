#!/bin/bash

echo "üß™ EX√âCUTION DES TESTS UNITAIRES ET D'INT√âGRATION"
echo "================================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "composer.json" ]; then
    echo -e "${RED}‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet Laravel${NC}"
    exit 1
fi

echo -e "${BLUE}üìã V√âRIFICATION DE L'ENVIRONNEMENT${NC}"
echo "----------------------------------------"

# V√©rifier que PHP est install√©
if command -v php &> /dev/null; then
    echo -e "${GREEN}‚úÖ PHP install√©: $(php --version | head -n1)${NC}"
else
    echo -e "${RED}‚ùå PHP n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier que Composer est install√©
if command -v composer &> /dev/null; then
    echo -e "${GREEN}‚úÖ Composer install√©: $(composer --version | head -n1)${NC}"
else
    echo -e "${RED}‚ùå Composer n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier que les d√©pendances sont install√©es
if [ ! -d "vendor" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Installation des d√©pendances Composer...${NC}"
    composer install --no-interaction
    print_result $? "Installation des d√©pendances Composer"
fi

echo ""
echo -e "${BLUE}üîß PR√âPARATION DES TESTS${NC}"
echo "------------------------"

# Cr√©er la base de donn√©es de test si elle n'existe pas
echo -e "${YELLOW}üìä Configuration de la base de donn√©es de test...${NC}"
php artisan config:clear
php artisan cache:clear

# Ex√©cuter les migrations de test
echo -e "${YELLOW}üóÑÔ∏è  Ex√©cution des migrations de test...${NC}"
php artisan migrate --env=testing --force
print_result $? "Migrations de test"

echo ""
echo -e "${BLUE}üß™ EX√âCUTION DES TESTS${NC}"
echo "---------------------"

# Tests unitaires des mod√®les
echo -e "${YELLOW}üìù Tests unitaires des mod√®les...${NC}"
php artisan test tests/Unit/Models/StudentTest.php --verbose
print_result $? "Tests du mod√®le Student"

php artisan test tests/Unit/Models/TeacherTest.php --verbose
print_result $? "Tests du mod√®le Teacher"

php artisan test tests/Unit/Models/LessonTest.php --verbose
print_result $? "Tests du mod√®le Lesson"

echo ""

# Tests d'int√©gration des API
echo -e "${YELLOW}üåê Tests d'int√©gration des API...${NC}"
php artisan test tests/Feature/Api/StudentApiTest.php --verbose
print_result $? "Tests API des √©tudiants"

php artisan test tests/Feature/Api/TeacherApiTest.php --verbose
print_result $? "Tests API des enseignants"

php artisan test tests/Feature/Api/LessonApiTest.php --verbose
print_result $? "Tests API des cours"

echo ""

# Tests frontend (si Node.js est disponible)
if command -v npm &> /dev/null && [ -d "frontend" ]; then
    echo -e "${YELLOW}üé® Tests frontend...${NC}"
    cd frontend
    
    # V√©rifier que les d√©pendances sont install√©es
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}üì¶ Installation des d√©pendances Node.js...${NC}"
        npm install
    fi
    
    # Ex√©cuter les tests unitaires frontend
    npm run test:unit
    print_result $? "Tests unitaires frontend"
    
    cd ..
else
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js non disponible, tests frontend ignor√©s${NC}"
fi

echo ""
echo -e "${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "-------------------"

# Compter les tests r√©ussis et √©chou√©s
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Ex√©cuter tous les tests et compter les r√©sultats
TEST_OUTPUT=$(php artisan test --verbose 2>&1)
TOTAL_TESTS=$(echo "$TEST_OUTPUT" | grep -c "‚úì\|‚úó")
PASSED_TESTS=$(echo "$TEST_OUTPUT" | grep -c "‚úì")
FAILED_TESTS=$(echo "$TEST_OUTPUT" | grep -c "‚úó")

echo -e "${GREEN}‚úÖ Tests r√©ussis: $PASSED_TESTS${NC}"
echo -e "${RED}‚ùå Tests √©chou√©s: $FAILED_TESTS${NC}"
echo -e "${BLUE}üìà Total des tests: $TOTAL_TESTS${NC}"

if [ $FAILED_TESTS -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ TOUS LES TESTS SONT PASS√âS !${NC}"
    echo -e "${GREEN}Le syst√®me √©l√®ves, enseignants et cours fonctionne correctement.${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â${NC}"
    echo -e "${YELLOW}V√©rifiez les erreurs ci-dessus pour identifier les probl√®mes.${NC}"
    exit 1
fi