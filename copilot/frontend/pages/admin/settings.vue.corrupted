<template>
    <div class="min-h-screen bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Header -->
            <div class="mb-8">
                <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                    <EquestrianIcon icon="horseshoe" class="mr-3 text-primary-600" :size="32" />
                    Paramètres Système
                </h1>
                <p class="mt-2 text-gray-600">Configuration générale de la plateforme</p>
            </div>

            <!-- Settings Sections -->
            <div class="space-y-8">
                <!-- General Settings -->
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                        <EquestrianIcon icon="trophy" class="mr-2 text-primary-600" :size="20" />
                        Paramètres généraux
                    </h2>

                    <form @submit.prevent="saveGeneralSettings" class="space-y-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nom de la plateforme</label>
                                <input v-model="generalSettings.platform_name" type="text" class="input-field" required>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Email de contact</label>
                                <input v-model="generalSettings.contact_email" type="email" class="input-field" required>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Téléphone de contact</label>
                                <input v-model="generalSettings.contact_phone" type="tel" class="input-field">
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Fuseau horaire</label>
                                <select v-model="generalSettings.timezone" class="input-field">
                                    <option value="Europe/Brussels">Europe/Brussels</option>
                                    <option value="Europe/Paris">Europe/Paris</option>
                                    <option value="Europe/London">Europe/London</option>
                                </select>
                            </div>
                        </div>

                        <!-- Section Logo - Séparée pour plus de visibilité -->
                        <div class="bg-blue-50 p-6 rounded-lg border-2 border-blue-200">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                <EquestrianIcon icon="trophy" class="mr-2 text-primary-600" :size="20" />
                                Gestion du Logo
                            </h3>

                            <div class="space-y-4">
                                <!-- URL du logo -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">URL du logo
                                        actuel</label>
                                    <input v-model="generalSettings.logo_url" type="text" class="input-field"
                                        placeholder="/logo.svg">
                                    <p class="text-xs text-gray-500 mt-1">URL du logo (SVG recommandé, max 200px de
                                        largeur)</p>
                                </div>

                                <!-- Upload de nouveau logo -->
                                <div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">
                                        <EquestrianIcon icon="horseshoe" class="inline mr-1" :size="16" />
                                        Uploader un nouveau logo
                                    </label>
                                    <input ref="logoFileInput" type="file" accept="image/*,.svg"
                                        @change="onLogoFileChange"
                                        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                                    <p class="text-xs text-gray-400 mt-1">Formats acceptés : SVG, PNG, JPG (max 2MB)</p>
                                </div>

                                <!-- Aperçu du logo -->
                                <div v-if="generalSettings.logo_url" class="bg-white p-4 rounded-lg border">
                                    <label class="block text-sm font-medium text-gray-700 mb-3">Aperçu du logo</label>
                                    <div class="flex items-center space-x-6">
                                        <div class="text-center">
                                            <p class="text-xs text-gray-500 mb-2">Fond clair</p>
                                            <div class="bg-white p-4 rounded border shadow-sm">
                                                <img :src="generalSettings.logo_url" alt="Logo sur fond clair"
                                                    class="h-12 max-w-40 mx-auto" @error="onLogoError">
                                            </div>
                                        </div>
                                        <div class="text-center">
                                            <p class="text-xs text-gray-500 mb-2">Fond foncé</p>
                                            <div class="bg-gray-800 p-4 rounded shadow-sm">
                                                <img :src="generalSettings.logo_url" alt="Logo sur fond foncé"
                                                    class="h-12 max-w-40 mx-auto" @error="onLogoError">
                                            </div>
                                        </div>
                                        <div class="text-center">
                                            <p class="text-xs text-gray-500 mb-2">Taille réelle</p>
                                            <div class="bg-gray-100 p-4 rounded border">
                                                <img :src="generalSettings.logo_url" alt="Logo taille réelle"
                                                    class="max-h-8 mx-auto" @error="onLogoError">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Section Adresse -->
                        <div class="col-span-full">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Adresse de la société</label>
                            <textarea v-model="generalSettings.company_address" class="input-field" rows="3"></textarea>
                        </div>
                </div>

                <div class="flex justify-end">
                    <button type="submit" class="btn-primary">Sauvegarder</button>
                </div>
                </form>
            </div>

            <!-- Booking Settings -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <EquestrianIcon icon="saddle" class="mr-2 text-primary-600" :size="20" />
                    Paramètres de réservation
                </h2>

                <form @submit.prevent="saveBookingSettings" class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Délai minimum de réservation
                                (heures)</label>
                            <input v-model.number="bookingSettings.min_booking_hours" type="number" min="1"
                                class="input-field" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Délai maximum de réservation
                                (jours)</label>
                            <input v-model.number="bookingSettings.max_booking_days" type="number" min="1"
                                class="input-field" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Délai d'annulation
                                (heures)</label>
                            <input v-model.number="bookingSettings.cancellation_hours" type="number" min="1"
                                class="input-field" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Durée par défaut des cours
                                (minutes)</label>
                            <select v-model.number="bookingSettings.default_lesson_duration" class="input-field">
                                <option :value="30">30 minutes</option>
                                <option :value="45">45 minutes</option>
                                <option :value="60">60 minutes</option>
                                <option :value="90">90 minutes</option>
                                <option :value="120">120 minutes</option>
                            </select>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div class="flex items-center">
                            <input v-model="bookingSettings.auto_confirm_bookings" type="checkbox"
                                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                            <label class="ml-2 block text-sm text-gray-900">Confirmation automatique des
                                réservations</label>
                        </div>

                        <div class="flex items-center">
                            <input v-model="bookingSettings.send_reminder_emails" type="checkbox"
                                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                            <label class="ml-2 block text-sm text-gray-900">Envoyer des emails de rappel</label>
                        </div>

                        <div class="flex items-center">
                            <input v-model="bookingSettings.allow_student_cancellation" type="checkbox"
                                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                            <label class="ml-2 block text-sm text-gray-900">Permettre l'annulation par les
                                élèves</label>
                        </div>
                    </div>

                    <div class="flex justify-end">
                        <button type="submit" class="btn-primary">Sauvegarder</button>
                    </div>
                </form>
            </div>

            <!-- Payment Settings -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <EquestrianIcon icon="horseshoe" class="mr-2 text-primary-600" :size="20" />
                    Paramètres de paiement
                </h2>

                <form @submit.prevent="savePaymentSettings" class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Commission plateforme
                                (%)</label>
                            <input v-model.number="paymentSettings.platform_commission" type="number" min="0" max="100"
                                step="0.1" class="input-field" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">TVA (%)</label>
                            <input v-model.number="paymentSettings.vat_rate" type="number" min="0" max="100" step="0.1"
                                class="input-field" required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Devise par défaut</label>
                            <select v-model="paymentSettings.default_currency" class="input-field">
                                <option value="EUR">Euro (EUR)</option>
                                <option value="USD">Dollar US (USD)</option>
                                <option value="GBP">Livre Sterling (GBP)</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Délai de reversement
                                (jours)</label>
                            <input v-model.number="paymentSettings.payout_delay_days" type="number" min="1"
                                class="input-field" required>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div class="flex items-center">
                            <input v-model="paymentSettings.stripe_enabled" type="checkbox"
                                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                            <label class="ml-2 block text-sm text-gray-900">Activer Stripe</label>
                        </div>

                        <div class="flex items-center">
                            <input v-model="paymentSettings.auto_payout" type="checkbox"
                                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                            <label class="ml-2 block text-sm text-gray-900">Reversement automatique aux
                                enseignants</label>
                        </div>
                    </div>

                    <div class="flex justify-end">
                        <button type="submit" class="btn-primary">Sauvegarder</button>
                    </div>
                </form>
            </div>

            <!-- Notification Settings -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <EquestrianIcon icon="helmet" class="mr-2 text-primary-600" :size="20" />
                    Paramètres de notification
                </h2>

                <form @submit.prevent="saveNotificationSettings" class="space-y-6">
                    <div class="space-y-4">
                        <h3 class="text-lg font-medium text-gray-900">Notifications Email</h3>

                        <div class="space-y-3">
                            <div class="flex items-center">
                                <input v-model="notificationSettings.email_new_booking" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Nouvelle réservation</label>
                            </div>

                            <div class="flex items-center">
                                <input v-model="notificationSettings.email_booking_cancelled" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Réservation annulée</label>
                            </div>

                            <div class="flex items-center">
                                <input v-model="notificationSettings.email_payment_received" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Paiement reçu</label>
                            </div>

                            <div class="flex items-center">
                                <input v-model="notificationSettings.email_lesson_reminder" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Rappel de cours</label>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <h3 class="text-lg font-medium text-gray-900">Notifications SMS</h3>

                        <div class="space-y-3">
                            <div class="flex items-center">
                                <input v-model="notificationSettings.sms_new_booking" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Nouvelle réservation</label>
                            </div>

                            <div class="flex items-center">
                                <input v-model="notificationSettings.sms_lesson_reminder" type="checkbox"
                                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                                <label class="ml-2 block text-sm text-gray-900">Rappel de cours</label>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end">
                        <button type="submit" class="btn-primary">Sauvegarder</button>
                    </div>
                </form>
            </div>

            <!-- System Status -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <EquestrianIcon icon="horse" class="mr-2 text-primary-600" :size="20" />
                    État du système
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div v-for="service in systemServices" :key="service.name" class="p-4 border rounded-lg">
                        <div class="flex items-center justify-between">
                            <span class="text-sm font-medium text-gray-900">{{ service.name }}</span>
                            <span
                                :class="service.status === 'online' ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'"
                                class="px-2 py-1 text-xs font-semibold rounded-full">
                                {{ service.status === 'online' ? 'En ligne' : 'Hors ligne' }}
                            </span>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">{{ service.description }}</p>
                    </div>
                </div>

                <div class="mt-6 flex space-x-3">
                    <button @click="checkSystemStatus" class="btn-outline">
                        Vérifier l'état
                    </button>
                    <button @click="clearCache" class="btn-outline">
                        Vider le cache
                    </button>
                </div>
            </div>
        </div>
    </div>
    </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

definePageMeta({
    middleware: 'auth-admin'
})

// Reactive data
const generalSettings = ref({
    platform_name: 'BookYourCoach',
    logo_url: '/logo.svg',
    contact_email: 'contact@bookyourcoach.fr',
    contact_phone: '+33 1 23 45 67 89',
    timezone: 'Europe/Brussels',
    company_address: ''
})

const bookingSettings = ref({
    min_booking_hours: 2,
    max_booking_days: 30,
    cancellation_hours: 24,
    default_lesson_duration: 60,
    auto_confirm_bookings: true,
    send_reminder_emails: true,
    allow_student_cancellation: true
})

const paymentSettings = ref({
    platform_commission: 10,
    vat_rate: 21,
    default_currency: 'EUR',
    payout_delay_days: 7,
    stripe_enabled: true,
    auto_payout: false
})

const notificationSettings = ref({
    email_new_booking: true,
    email_booking_cancelled: true,
    email_payment_received: true,
    email_lesson_reminder: true,
    sms_new_booking: false,
    sms_lesson_reminder: false
})

const systemServices = ref([
    { name: 'API Backend', status: 'online', description: 'Service principal' },
    { name: 'Base de données', status: 'online', description: 'MySQL' },
    { name: 'Cache Redis', status: 'online', description: 'Cache en mémoire' },
    { name: 'Stripe', status: 'online', description: 'Paiements' },
    { name: 'Email SMTP', status: 'online', description: 'Envoi d\'emails' },
    { name: 'SMS Gateway', status: 'offline', description: 'Envoi de SMS' },
    { name: 'Stockage', status: 'online', description: 'Fichiers' },
    { name: 'Sauvegardes', status: 'online', description: 'Backup automatique' }
])

// Methods
const saveGeneralSettings = async () => {
    try {
        const { $api } = useNuxtApp()
        await $api.put('/admin/settings/general', generalSettings.value)
        alert('Paramètres généraux sauvegardés avec succès!')
    } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error)
        alert('Erreur lors de la sauvegarde des paramètres généraux')
    }
}

const onLogoError = (event) => {
    console.warn('Erreur de chargement du logo:', event.target.src)
    event.target.style.display = 'none'
}

// Fonction pour gérer l'upload du logo
const logoFileInput = ref(null)

const onLogoFileChange = async (event) => {
    const file = event.target.files[0]
    if (!file) return

    // Validation du fichier
    if (file.size > 2 * 1024 * 1024) { // 2MB
        alert('Le fichier est trop volumineux. Maximum 2MB.')
        return
    }

    if (!file.type.startsWith('image/') && !file.type.includes('svg')) {
        alert('Format de fichier non supporté. Utilisez SVG, PNG ou JPG.')
        return
    }

    try {
        // Créer FormData pour l'upload
        const formData = new FormData()
        formData.append('logo', file)

        const { $api } = useNuxtApp()
        const response = await $api.post('/upload/logo', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        })

        if (response.data?.success && response.data?.logo_url) {
            // Mettre à jour l'URL du logo
            generalSettings.value.logo_url = response.data.logo_url
            alert('Logo uploadé avec succès!')
        } else {
            throw new Error('Réponse invalide du serveur')
        }
    } catch (error) {
        console.error('Erreur lors de l\'upload:', error)
        alert('Erreur lors de l\'upload du logo. Vérifiez le format et la taille du fichier.')
    } finally {
        // Réinitialiser l'input file
        if (logoFileInput.value) {
            logoFileInput.value.value = ''
        }
    }
}

const saveBookingSettings = async () => {
    try {
        const { $api } = useNuxtApp()
        await $api.put('/admin/settings/booking', bookingSettings.value)
        alert('Paramètres de réservation sauvegardés avec succès!')
    } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error)
        alert('Erreur lors de la sauvegarde des paramètres de réservation')
    }
}

const savePaymentSettings = async () => {
    try {
        const { $api } = useNuxtApp()
        await $api.put('/admin/settings/payment', paymentSettings.value)
        alert('Paramètres de paiement sauvegardés avec succès!')
    } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error)
        alert('Erreur lors de la sauvegarde des paramètres de paiement')
    }
}

const saveNotificationSettings = async () => {
    try {
        const { $api } = useNuxtApp()
        await $api.put('/admin/settings/notification', notificationSettings.value)
        alert('Paramètres de notification sauvegardés avec succès!')
    } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error)
        alert('Erreur lors de la sauvegarde des paramètres de notification')
    }
}

const checkSystemStatus = async () => {
    try {
        const { $api } = useNuxtApp()
        const response = await $api.get('/admin/system/status')
        systemServices.value = response.data.services || systemServices.value
        alert('État du système vérifié!')
    } catch (error) {
        console.error('Erreur lors de la vérification:', error)
        alert('Erreur lors de la vérification de l\'état du système')
    }
}

const clearCache = async () => {
    try {
        const { $api } = useNuxtApp()
        await $api.post('/admin/system/clear-cache')
        alert('Cache vidé avec succès!')
    } catch (error) {
        console.error('Erreur lors du vidage du cache:', error)
        alert('Erreur lors du vidage du cache')
    }
}

const loadSettings = async () => {
    try {
        const { $api } = useNuxtApp()

        // Charger tous les paramètres en parallèle
        const [generalResp, bookingResp, paymentResp, notificationResp] = await Promise.all([
            $api.get('/admin/settings/general').catch(() => ({ data: generalSettings.value })),
            $api.get('/admin/settings/booking').catch(() => ({ data: bookingSettings.value })),
            $api.get('/admin/settings/payment').catch(() => ({ data: paymentSettings.value })),
            $api.get('/admin/settings/notification').catch(() => ({ data: notificationSettings.value }))
        ])

        generalSettings.value = { ...generalSettings.value, ...generalResp.data }
        bookingSettings.value = { ...bookingSettings.value, ...bookingResp.data }
        paymentSettings.value = { ...paymentSettings.value, ...paymentResp.data }
        notificationSettings.value = { ...notificationSettings.value, ...notificationResp.data }
    } catch (error) {
        console.error('Erreur lors du chargement des paramètres:', error)
    }
}

// Lifecycle
onMounted(() => {
    loadSettings()
})
</script>
