name: üöÄ D√©ploiement Production (Actif)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/activibe-app

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build, Push & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout du code
      uses: actions/checkout@v4
      
    - name: üê≥ Configuration Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Connexion DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: üèóÔ∏è Build et Push de l'image Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üìù G√©n√©ration des fichiers de configuration sur le Runner
      run: |
        echo "üîß G√©n√©ration de docker-compose.yml..."
        cat > docker-compose.yml << 'EOF'
        version: "3.8"

        services:
          app:
            image: ${{ env.IMAGE_NAME }}:latest
            container_name: activibe-app
            restart: unless-stopped
            environment:
              - VIRTUAL_HOST=${VIRTUAL_HOST}
              - VIRTUAL_PORT=3001
              - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
              - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
              - APP_NAME=${APP_NAME}
              - APP_ENV=${APP_ENV}
              - APP_DEBUG=${APP_DEBUG}
              - APP_URL=${APP_URL}
              - DB_CONNECTION=mysql
              - DB_HOST=${DB_HOST}
              - DB_PORT=${DB_PORT}
              - DB_DATABASE=${DB_DATABASE}
              - DB_USERNAME=${DB_USERNAME}
              - DB_PASSWORD=${DB_PASSWORD}
              - REDIS_HOST=redis
              - REDIS_PASSWORD=${REDIS_PASSWORD}
              - CACHE_DRIVER=redis
              - SESSION_DRIVER=redis
              - QUEUE_CONNECTION=redis
            networks:
              - nginx-proxy
              - app-network
            depends_on:
              - redis

          redis:
            image: redis:7-alpine
            container_name: activibe-redis
            restart: unless-stopped
            volumes:
              - redis_data:/data
            networks:
              - app-network
            command: redis-server --appendonly yes --requirepass \${REDIS_PASSWORD}

          neo4j:
            image: neo4j:5.15-community
            container_name: activibe-neo4j
            restart: unless-stopped
            ports:
              - "7474:7474"
              - "7687:7687"
            environment:
              - NEO4J_AUTH=neo4j/\${NEO4J_PASSWORD}
            volumes:
              - neo4j_data:/data
            networks:
              - app-network
              
          phpmyadmin:
            image: phpmyadmin:latest
            container_name: activibe-phpmyadmin
            restart: unless-stopped
            ports:
              - "8082:80"
            environment:
              - PMA_HOST=\${DB_HOST}
              - PMA_PORT=\${DB_PORT}
              - PMA_USER=\${DB_USERNAME}
              - PMA_PASSWORD=\${DB_PASSWORD}
            networks:
              - app-network
            depends_on:
              - redis

        volumes:
          redis_data:
          neo4j_data:

        networks:
          nginx-proxy:
            external: true
          app-network:
            driver: bridge
        EOF

        echo "üîß G√©n√©ration de production.env..."
        cat > production.env << EOF
        APP_NAME="${{ vars.APP_NAME }}"
        APP_ENV=production
        APP_DEBUG=false
        APP_URL="${{ vars.APP_URL }}"
        VIRTUAL_HOST="${{ vars.VIRTUAL_HOST }}"
        LETSENCRYPT_HOST="${{ vars.LETSENCRYPT_HOST }}"
        LETSENCRYPT_EMAIL="${{ vars.LETSENCRYPT_EMAIL }}"
        DB_CONNECTION=mysql
        DB_HOST=${{ secrets.DB_HOST_OVH }}
        DB_PORT=${{ secrets.DB_PORT_OVH }}
        DB_DATABASE=${{ secrets.DB_DATABASE_OVH }}
        DB_USERNAME=${{ secrets.DB_USERNAME_OVH }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD_OVH }}
        REDIS_HOST=redis
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        REDIS_PORT=6379
        CACHE_DRIVER=redis
        SESSION_DRIVER=redis
        QUEUE_CONNECTION=redis
        NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
        EOF

    - name: üöÄ D√©ploiement sur le serveur
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ vars.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT }}
        script: |
          set -e
          APP_DIR="/srv/activibe"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          echo "üõë Arr√™t des anciens services applicatifs..."
          docker stop activibe-app activibe-redis activibe-neo4j activibe-phpmyadmin 2>/dev/null || true
          docker rm activibe-app activibe-redis activibe-neo4j activibe-phpmyadmin 2>/dev/null || true

    - name: üìÇ Copie des nouveaux fichiers de configuration
      uses: scp-action@v1.1.2
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ vars.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT }}
        source: "docker-compose.yml,production.env"
        target: "/srv/activibe/"

    - name: üöÄ D√©marrage de la nouvelle stack
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SERVER_HOST }}
        username: ${{ vars.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ vars.SERVER_PORT }}
        script: |
          set -e
          cd /srv/activibe
          
          echo "üì• R√©cup√©ration de la derni√®re image..."
          docker pull ${{ env.IMAGE_NAME }}:latest
          
          echo "üöÄ D√©marrage de la nouvelle stack..."
          docker-compose -f docker-compose.yml --env-file production.env up -d
          
          echo "‚è≥ Attente de la stabilisation (30s)..."
          sleep 30
          
          echo "üìä √âtat final des containers :"
          docker ps
          
          echo "‚úÖ D√©ploiement termin√© !"

    - name: üßπ Nettoyage du projet (fichiers inutilis√©s)
      if: success()
      run: |
        echo "Le d√©ploiement est r√©ussi. Vous pouvez maintenant supprimer les fichiers inutiles."
        echo "Fichiers √† supprimer : .github/workflows/deploy-production.yml, docker-compose.prod.yml, etc."
        # Cette √©tape est manuelle pour l'instant pour des raisons de s√©curit√©.
