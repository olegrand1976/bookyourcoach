name: BookYourCoach CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permet le d√©clenchement manuel

env:
  PHP_VERSION: '8.3'
  MYSQL_VERSION: '8.0'
  REDIS_VERSION: '7-alpine'
  APP_NAME: 'BookYourCoach'

jobs:
  test:
    name: Tests Unitaires et Feature
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: activibe_test
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, redis, sqlite3, pdo_sqlite
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit only)
      run: php artisan test --testsuite=Unit --stop-on-failure
      env:
        APP_NAME: ${{ env.APP_NAME }}
        APP_ENV: testing
        APP_KEY: base64:test-key-for-github-actions
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: activibe_test
        DB_USERNAME: laravel
        DB_PASSWORD: laravel_password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
        CACHE_DRIVER: redis
        SESSION_DRIVER: redis

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: bookyourcoach-coverage
        fail_ci_if_error: false
      if: always()

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Security Audit
      run: composer audit

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=gh-{{sha}},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/bookyourcoach
          echo "üöÄ D√©ploiement staging de BookYourCoach..."
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d
          docker system prune -f
          echo "‚úÖ D√©ploiement staging termin√©"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/bookyourcoach
          echo "üöÄ D√©ploiement production de BookYourCoach..."
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f
          echo "‚úÖ D√©ploiement production termin√©"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify GitHub
      uses: actions/github-script@v7
      with:
        script: |
          const { context } = require('@actions/github');
          const { execSync } = require('child_process');
          
          const status = '${{ needs.deploy-staging.result }}' === 'success' || '${{ needs.deploy-production.result }}' === 'success' ? 'success' : 'failure';
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          const message = `${emoji} BookYourCoach deployment ${status}`;
          
          console.log(message);
          
          // Cr√©er un commentaire sur le commit si c'est un PR
          if (context.payload.pull_request) {
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }
      
    - name: Notify Slack (Optional)
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#bookyourcoach-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "BookYourCoach Deployment Status",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [{
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "Branch",
                "value": "${{ github.ref_name }}",
                "short": true
              }, {
                "title": "Commit",
                "value": "${{ github.sha }}",
                "short": true
              }, {
                "title": "Author",
                "value": "${{ github.actor }}",
                "short": true
              }]
            }]
          }
      if: always() && env.SLACK_WEBHOOK != ''
