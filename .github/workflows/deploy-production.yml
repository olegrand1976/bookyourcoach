name: 🚀 Déploiement Production Automatique

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Forcer la reconstruction des images'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/activibe-app
  COMPOSE_FILE: docker-compose.yml # Changement de nom
  ENV_FILE: production.env

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🐳 Configuration Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Connexion DockerHub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: 🏗️ Build et Push de l'image Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📝 Génération des fichiers de configuration
      run: |
        echo "🔧 Création du fichier docker-compose.yml (version simplifiée)..."
        cat > docker-compose.yml << 'EOF'
        version: "3.8"

        services:
          # Application Laravel + Nuxt (image unique)
          app:
            image: ${IMAGE_NAME:-${{ env.IMAGE_NAME }}:latest}
            container_name: activibe-app
            restart: unless-stopped
            env_file:
              - ./production.env
            ports:
              # Exposition directe : port 8080 du serveur -> port 80 du conteneur (Laravel via Nginx)
              - "8080:80"
            volumes:
              - app_storage:/var/www/storage
              - app_bootstrap_cache:/var/www/bootstrap/cache
            depends_on:
              - redis
              - neo4j
            networks:
              - app-network

          # phpMyAdmin pour administrer la base de données OVH
          phpmyadmin:
            image: phpmyadmin:latest
            container_name: activibe-phpmyadmin
            restart: unless-stopped
            ports:
              # Exposition sur le port 8082 pour éviter les conflits
              - "8082:80"
            environment:
              - PMA_HOST=${DB_HOST}
              - PMA_PORT=${DB_PORT}
              - PMA_USER=${DB_USERNAME}
              - PMA_PASSWORD=${DB_PASSWORD}
              - UPLOAD_LIMIT=256M
              - MEMORY_LIMIT=512M
            networks:
              - app-network

          # Redis pour cache et sessions
          redis:
            image: redis:7-alpine
            container_name: activibe-redis
            restart: unless-stopped
            volumes:
              - redis_data:/data
            networks:
              - app-network
            command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

          # Neo4j pour analyses graphiques
          neo4j:
            image: neo4j:5.15-community
            container_name: activibe-neo4j
            restart: unless-stopped
            ports:
              - "7474:7474"  # Interface web
              - "7687:7687"  # Bolt protocol
            environment:
              - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
              - NEO4J_PLUGINS=["apoc"]
              - NEO4J_dbms_security_procedures_unrestricted=apoc.*
              - NEO4J_dbms_security_procedures_allowlist=apoc.*
            volumes:
              - neo4j_data:/data
              - neo4j_logs:/logs
              - neo4j_import:/var/lib/neo4j/import
              - neo4j_plugins:/plugins
            networks:
              - app-network

        volumes:
          redis_data:
            driver: local
          neo4j_data:
            driver: local
          neo4j_logs:
            driver: local
          neo4j_import:
            driver: local
          neo4j_plugins:
            driver: local
          app_storage:
            driver: local
          app_bootstrap_cache:
            driver: local

        networks:
          app-network:
            driver: bridge
        EOF

        echo "🔧 Création du fichier production.env (version simplifiée)..."
        cat > production.env << 'EOF'
        # Configuration de production BookYourCoach
        # Application
        APP_NAME="BookYourCoach"
        APP_ENV=production
        APP_DEBUG=false
        APP_URL=http://${{ vars.SERVER_HOST }}:8080

        # Base de données MySQL externe (OVH)
        DB_CONNECTION=mysql
        DB_HOST=${{ secrets.DB_HOST_OVH }}
        DB_PORT=${{ secrets.DB_PORT_OVH }}
        DB_DATABASE=${{ secrets.DB_DATABASE_OVH }}
        DB_USERNAME=${{ secrets.DB_USERNAME_OVH }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD_OVH }}

        # Cache Redis
        BROADCAST_DRIVER=redis
        CACHE_DRIVER=redis
        FILESYSTEM_DISK=local
        QUEUE_CONNECTION=redis
        SESSION_DRIVER=redis
        SESSION_LIFETIME=120

        REDIS_HOST=redis
        REDIS_PASSWORD=redis_secure_password_2024
        REDIS_PORT=6379

        # Mail SMTP
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.gmail.com
        MAIL_PORT=587
        MAIL_USERNAME=noreply@bookyourcoach.com
        MAIL_PASSWORD=your-smtp-password
        MAIL_ENCRYPTION=tls
        MAIL_FROM_ADDRESS="noreply@bookyourcoach.com"
        MAIL_FROM_NAME="${APP_NAME}"

        # Configuration spécifique BookYourCoach
        SANCTUM_STATEFUL_DOMAINS=${{ vars.SERVER_HOST }}:8080
        SESSION_DOMAIN=${{ vars.SERVER_HOST }}

        # MySQL Root Password (non utilisé, mais gardé pour compatibilité)
        MYSQL_ROOT_PASSWORD=mysql_root_secure_password_2024

        # Neo4j Configuration
        NEO4J_PASSWORD=neo4j_secure_password_2024

        # Docker Image Configuration
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        DOCKER_REGISTRY=docker.io
        EOF

        echo "🔧 Création du script de déploiement automatique (version simplifiée)..."
        cat > auto-deploy.sh << 'EOF'
        #!/bin/bash
        # Script de déploiement automatique via GitHub Actions (simplifié)

        set -e

        # Couleurs
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'

        log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
        log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
        log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
        log_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

        # Configuration
        COMPOSE_FILE="docker-compose.yml"
        ENV_FILE="production.env"
        APP_DIR="/srv/activibe"

        log_step "🚀 Démarrage du déploiement automatique (simplifié)..."

        # Arrêt propre des containers existants
        log_info "🛑 Arrêt des containers existants..."
        
        # Essayer d'arrêter avec docker compose si possible
        if [[ -f "$COMPOSE_FILE" ]]; then
            docker compose -f "$COMPOSE_FILE" down --remove-orphans 2>/dev/null || true
        fi
        
        # Arrêt forcé des containers connus au cas où
        for container in activibe-app activibe-phpmyadmin activibe-redis activibe-neo4j; do
            if docker ps --format '{{.Names}}' | grep -q "^$container$"; then
                log_info "🔄 Arrêt de $container..."
                docker stop "$container" 2>/dev/null || true
                docker rm "$container" 2>/dev/null || true
            fi
        done

        # Nettoyage des ressources orphelines
        log_info "🧹 Nettoyage des ressources orphelines..."
        docker container prune -f 2>/dev/null || true
        docker network prune -f 2>/dev/null || true

        # Pull de la dernière image
        log_info "📥 Récupération de la dernière image Docker..."
        source "$ENV_FILE"
        docker pull "${IMAGE_NAME}:latest" || {
            log_warning "⚠️  Impossible de récupérer l'image, utilisation de l'image locale"
        }

        # Démarrage des services
        log_info "🚀 Démarrage des services..."
        docker compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d

        # Attente du démarrage
        log_info "⏳ Attente du démarrage des services (30 secondes)..."
        sleep 30

        # Vérification de l'état des services
        log_step "🔍 Vérification de l'état des services..."
        docker compose -f "$COMPOSE_FILE" ps

        # Tests de connectivité
        log_step "🧪 Tests de connectivité..."

        # Test de l'application (port 8080)
        log_info "🔌 Test du port 8080 (Application)..."
        if curl -f http://localhost:8080 >/dev/null 2>&1; then
            log_info "✅ Port 8080 (Application) : Accessible"
        else
            log_warning "⚠️  Port 8080 (Application) : Non accessible (peut nécessiter plus de temps)"
        fi

        # Test port 7474 (Neo4j)
        log_info "🔌 Test du port 7474 (Neo4j)..."
        if curl -f http://localhost:7474 >/dev/null 2>&1; then
            log_info "✅ Port 7474 (Neo4j) : Accessible"
        else
            log_warning "⚠️  Port 7474 (Neo4j) : Non accessible"
        fi

        # Logs récents
        log_step "📋 Logs récents du conteneur applicatif..."
        
        echo "=== Logs activibe-app ==="
        docker logs --tail=20 activibe-app 2>/dev/null || log_warning "Pas de logs pour activibe-app"

        # Résumé final
        log_step "📊 RÉSUMÉ DU DÉPLOIEMENT"
        log_info "🎯 URLs d'accès :"
        log_info "   • Application principale : http://$(curl -s ifconfig.me):8080"
        log_info "   • phpMyAdmin : http://$(curl -s ifconfig.me):8082"
        log_info "   • Neo4j Interface : http://$(curl -s ifconfig.me):7474"
        log_info "   • Infiswap Front (préservé) : http://$(curl -s ifconfig.me):80"
        
        log_step "✅ Déploiement automatique terminé !"
        EOF

        chmod +x auto-deploy.sh

        echo "✅ Fichiers de configuration générés avec succès !"

    - name: 🔑 Configuration SSH
      run: |
        echo "🔧 Configuration de la connexion SSH..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Configuration SSH pour éviter les vérifications d'hôte
        cat > ~/.ssh/config << EOF
        Host production-server
          HostName ${{ vars.SERVER_HOST }}
          User ${{ vars.SERVER_USERNAME }}
          Port ${{ vars.SERVER_PORT }}
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF
        
        chmod 600 ~/.ssh/config

    - name: 📤 Déploiement sur le serveur
      run: |
        echo "🚀 Déploiement des fichiers sur le serveur..."
        
        # Création du répertoire de déploiement
        ssh production-server "mkdir -p /srv/activibe && cd /srv/activibe"
        
        # Copie des fichiers de configuration
        echo "📁 Copie des fichiers de configuration..."
        scp docker-compose.yml production-server:/srv/activibe/
        scp production.env production-server:/srv/activibe/
        scp auto-deploy.sh production-server:/srv/activibe/
        
        # Exécution du script de déploiement
        echo "🎯 Exécution du déploiement automatique..."
        ssh production-server "cd /srv/activibe && chmod +x auto-deploy.sh && ./auto-deploy.sh"

    - name: 🧪 Tests post-déploiement
      run: |
        echo "🔍 Tests de vérification post-déploiement..."
        
        # Test de connectivité des services
        echo "🌐 Test des services sur le serveur..."
        
        # Test application (port 8080)
        if ssh production-server "curl -f http://localhost:8080" >/dev/null 2>&1; then
          echo "✅ Application (port 8080) : OK"
        else
          echo "⚠️  Application (port 8080) : KO (peut nécessiter plus de temps)"
        fi
        
        # Test Neo4j (port 7474)
        if ssh production-server "curl -f http://localhost:7474" >/dev/null 2>&1; then
          echo "✅ Neo4j (port 7474) : OK"
        else
          echo "⚠️  Neo4j (port 7474) : KO"
        fi
        
        # Affichage de l'état des containers
        echo "📊 État des containers :"
        ssh production-server "cd /srv/activibe && docker compose -f docker-compose.yml ps"

    - name: 📧 Notification de succès
      if: success()
      run: |
        echo "🎉 DÉPLOIEMENT RÉUSSI !"
        echo ""
        echo "🌐 L'application BookYourCoach est maintenant accessible :"
        echo "   • Application : http://${{ vars.SERVER_HOST }}:8080"
        echo "   • phpMyAdmin : http://${{ vars.SERVER_HOST }}:8082"
        echo "   • Infiswap Front (préservé) : http://${{ vars.SERVER_HOST }}:80"
        echo "   • Neo4j : http://${{ vars.SERVER_HOST }}:7474"
        echo ""
        echo "🐳 Image déployée : ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "📅 Date : $(date)"

    - name: 🚨 Notification d'échec
      if: failure()
      run: |
        echo "❌ ÉCHEC DU DÉPLOIEMENT !"
        echo ""
        echo "🔍 Vérifiez les logs ci-dessus pour identifier le problème."
        echo "📋 Points à vérifier :"
        echo "   • Connexion SSH au serveur"
        echo "   • Variables d'environnement GitHub"
        echo "   • Disponibilité de DockerHub"
        echo "   • État du serveur de production"
        echo ""
        echo "🆘 En cas de problème persistant, connectez-vous manuellement :"
        echo "   ssh ${{ vars.SERVER_USERNAME }}@${{ vars.SERVER_HOST }}"
        echo "   cd /srv/activibe && ./auto-deploy.sh"
