name: 🚀 Déploiement Production Automatique

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Forcer la reconstruction des images'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/activibe-app
  FRONTEND_IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/activibe-frontend
  COMPOSE_FILE: docker-compose.yml
  ENV_FILE: production.env

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🐳 Configuration Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Connexion DockerHub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: 🏗️ Build et Push de l'image Backend (Laravel)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🎨 Build et Push de l'image Frontend (Nuxt.js)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📝 Génération des fichiers de configuration
      run: |
        echo "🔧 Création du fichier docker-compose.yml (version simplifiée)..."
        cat > docker-compose.yml << 'EOF'
        version: "3.8"

        services:
          # Backend Laravel API
          backend:
            image: ${IMAGE_NAME:-${{ env.IMAGE_NAME }}:latest}
            container_name: activibe-backend
            restart: unless-stopped
            env_file:
              - ./.env
            ports:
              # API Backend accessible en interne et externe
              - "8080:80"
            volumes:
              - app_storage:/var/www/storage
              - app_bootstrap_cache:/var/www/bootstrap/cache
              - /srv/activibe/cert.pem:/var/www/html/cert.pem:ro
              - /srv/activibe/.env:/var/www/html/.env:ro
            depends_on:
              - neo4j
            networks:
              - app-network

          # Frontend Nuxt.js
          frontend:
            image: ${FRONTEND_IMAGE_NAME:-${{ vars.DOCKERHUB_USERNAME }}/activibe-frontend:latest}
            container_name: activibe-frontend
            restart: unless-stopped
            ports:
              # Frontend accessible sur le port 3000
              - "3000:3000"
            environment:
              - NUXT_PUBLIC_API_BASE=http://activibe-backend:80/api
              - NUXT_API_BASE=http://activibe-backend:80/api
              - NITRO_HOST=0.0.0.0
              - NITRO_PORT=3000
            depends_on:
              - backend
            networks:
              - app-network

          # phpMyAdmin pour administrer la base de données OVH
          phpmyadmin:
            image: phpmyadmin:latest
            container_name: activibe-phpmyadmin
            restart: unless-stopped
            ports:
              # Exposition sur le port 8082 pour éviter les conflits
              - "8082:80"
            environment:
              - PMA_HOST=${DB_HOST}
              - PMA_PORT=${DB_PORT}
              - PMA_USER=${DB_USERNAME}
              - PMA_PASSWORD=${DB_PASSWORD}
              - UPLOAD_LIMIT=256M
              - MEMORY_LIMIT=512M
            networks:
              - app-network

          # Redis hébergé sur OVH (pas de conteneur local nécessaire)

          # Neo4j pour analyses graphiques
          neo4j:
            image: neo4j:5.15-community
            container_name: activibe-neo4j
            restart: unless-stopped
            ports:
              - "7474:7474"  # Interface web
              - "7687:7687"  # Bolt protocol
            environment:
              - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
              - NEO4J_PLUGINS=["apoc"]
              - NEO4J_dbms_security_procedures_unrestricted=apoc.*
              - NEO4J_dbms_security_procedures_allowlist=apoc.*
            volumes:
              - neo4j_data:/data
              - neo4j_logs:/logs
              - neo4j_import:/var/lib/neo4j/import
              - neo4j_plugins:/plugins
            networks:
              - app-network

        volumes:
          neo4j_data:
            driver: local
          neo4j_logs:
            driver: local
          neo4j_import:
            driver: local
          neo4j_plugins:
            driver: local
          app_storage:
            driver: local
          app_bootstrap_cache:
            driver: local

        networks:
          app-network:
            driver: bridge
        EOF

        echo "🔧 Génération de APP_KEY Laravel..."
        APP_KEY=$(openssl rand -base64 32)
        
        echo "🔧 Création du script de mise à jour .env..."
        cat > update-env.sh << 'EOF'
        #!/bin/bash
        # Script pour vérifier/générer APP_KEY dans le fichier .env existant
        
        if [[ -f ".env" ]]; then
            # Vérifier si APP_KEY existe et est valide
            current_key=$(grep "^APP_KEY=" .env | cut -d'=' -f2)
            
            if [[ -n "$current_key" && "$current_key" != "base64:\$(openssl rand -base64 32)" && "$current_key" =~ ^base64:[A-Za-z0-9+/]{43}=?$ ]]; then
                echo "✅ APP_KEY valide trouvée - conservation de la clé existante"
                echo "🔑 APP_KEY actuelle: ${current_key:0:15}..."
            else
                echo "📝 APP_KEY manquante ou invalide - génération d'une nouvelle clé..."
                if grep -q "^APP_KEY=" .env; then
                    sed -i "s/^APP_KEY=.*/APP_KEY=base64:$1/" .env
                else
                    echo "APP_KEY=base64:$1" >> .env
                fi
                echo "✅ Nouvelle APP_KEY générée avec succès"
                echo "🔑 Nouvelle APP_KEY: base64:${1:0:10}..."
            fi
        else
            echo "❌ Fichier .env non trouvé"
            exit 1
        fi
        EOF
        
        chmod +x update-env.sh

        echo "🔧 Création du script de déploiement automatique (version simplifiée)..."
        cat > auto-deploy.sh << 'EOF'
        #!/bin/bash
        # Script de déploiement automatique via GitHub Actions (simplifié)

        set -e

        # Couleurs
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'

        log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
        log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
        log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
        log_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

        # Configuration
        COMPOSE_FILE="docker-compose.yml"
        ENV_FILE=".env"
        APP_DIR="/srv/activibe"

        log_step "🚀 Démarrage du déploiement automatique (simplifié)..."

        # Arrêt propre des containers existants
        log_info "🛑 Arrêt des containers existants..."
        
        # Essayer d'arrêter avec docker compose si possible
        if [[ -f "$COMPOSE_FILE" ]]; then
            docker compose -f "$COMPOSE_FILE" down --remove-orphans 2>/dev/null || true
        fi
        
        # Arrêt forcé des containers connus au cas où
        for container in activibe-backend activibe-frontend activibe-phpmyadmin activibe-neo4j; do
            if docker ps --format '{{.Names}}' | grep -q "^$container$"; then
                log_info "🔄 Arrêt de $container..."
                docker stop "$container" 2>/dev/null || true
                docker rm "$container" 2>/dev/null || true
            fi
        done

        # Nettoyage des ressources orphelines
        log_info "🧹 Nettoyage des ressources orphelines..."
        docker container prune -f 2>/dev/null || true
        docker network prune -f 2>/dev/null || true

        # Mise à jour de APP_KEY dans .env
        log_info "🔑 Mise à jour de APP_KEY..."
        if [[ -f "update-env.sh" && -f ".env" ]]; then
            ./update-env.sh "$1"
        else
            log_warning "⚠️  Impossible de mettre à jour APP_KEY - fichiers manquants"
        fi

        # Configuration post-déploiement
        log_info "🔧 Configuration post-déploiement..."
        
        # Attendre que les conteneurs démarrent
        sleep 30
        
        # Créer le lien symbolique storage
        docker exec activibe-backend php /var/www/html/artisan storage:link 2>/dev/null || true
        
        # Corriger CORS pour permettre l'accès frontend
        docker exec activibe-backend sed -i "/localhost:3000/a\\        'http://\$(curl -s ifconfig.me):3000'," /var/www/html/config/cors.php 2>/dev/null || true
        
        # Vider les caches
        docker exec activibe-backend php /var/www/html/artisan config:clear 2>/dev/null || true
        docker exec activibe-backend php /var/www/html/artisan route:clear 2>/dev/null || true

        # Pull de la dernière image
        log_info "📥 Récupération des dernières images Docker..."
        source ".env"
        docker pull "$1:latest" || { log_error "Impossible de pull l'image backend"; exit 1; }
        docker pull "$2:latest" || { log_error "Impossible de pull l'image frontend"; exit 1; }

        # Démarrage avec docker compose
        log_info "🚀 Démarrage des conteneurs..."
        docker compose -f "$COMPOSE_FILE" up -d --remove-orphans

        # Attente du démarrage
        log_info "⏳ Attente du démarrage des services (30 secondes)..."
        sleep 30

        # Vérification de l'état des services
        log_step "🔍 Vérification de l'état des services..."
        docker compose -f "$COMPOSE_FILE" ps

        # Tests de connectivité
        log_step "🧪 Tests de connectivité..."

        # Test du backend Laravel (port 8080)
        log_info "🔌 Test du port 8080 (Backend Laravel)..."
        if curl -f http://localhost:8080 >/dev/null 2>&1; then
            log_info "✅ Port 8080 (Backend Laravel) : Accessible"
        else
            log_warning "⚠️  Port 8080 (Backend Laravel) : Non accessible (peut nécessiter plus de temps)"
        fi

        # Test du frontend Nuxt.js (port 3000)
        log_info "🔌 Test du port 3000 (Frontend Nuxt.js)..."
        if curl -f http://localhost:3000 >/dev/null 2>&1; then
            log_info "✅ Port 3000 (Frontend Nuxt.js) : Accessible"
        else
            log_warning "⚠️  Port 3000 (Frontend Nuxt.js) : Non accessible (peut nécessiter plus de temps)"
        fi

        # Test port 7474 (Neo4j)
        log_info "🔌 Test du port 7474 (Neo4j)..."
        if curl -f http://localhost:7474 >/dev/null 2>&1; then
            log_info "✅ Port 7474 (Neo4j) : Accessible"
        else
            log_warning "⚠️  Port 7474 (Neo4j) : Non accessible"
        fi

        # Logs récents
        log_step "📋 Logs récents des conteneurs..."
        
        echo "=== Logs Backend (Laravel) ==="
        docker logs --tail=10 activibe-backend 2>/dev/null || log_warning "Pas de logs pour activibe-backend"
        
        echo "=== Logs Frontend (Nuxt.js) ==="
        docker logs --tail=10 activibe-frontend 2>/dev/null || log_warning "Pas de logs pour activibe-frontend"

        # Résumé final
        log_step "📊 RÉSUMÉ DU DÉPLOIEMENT"
        log_info "🎯 URLs d'accès :"
        log_info "   • Frontend Nuxt.js : http://$(curl -s ifconfig.me):3000"
        log_info "   • Backend Laravel API : http://$(curl -s ifconfig.me):8080"
        log_info "   • phpMyAdmin : http://$(curl -s ifconfig.me):8082"
        log_info "   • Neo4j Interface : http://$(curl -s ifconfig.me):7474"
        log_info "   • Infiswap Front (préservé) : http://$(curl -s ifconfig.me):80"
        
        log_step "✅ Déploiement automatique terminé !"
        EOF

        chmod +x auto-deploy.sh

        echo "🔧 Copie des scripts de déploiement..."
        cp deploy_production_server_simple.sh deploy_production_server.sh
        cp test_production_containers_simple.sh test_production_containers.sh
        chmod +x deploy_production_server.sh
        chmod +x test_production_containers.sh

        echo "✅ Fichiers de configuration générés avec succès !"

    - name: 🔑 Configuration SSH
      run: |
        echo "🔧 Configuration de la connexion SSH..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Configuration SSH pour éviter les vérifications d'hôte
        cat > ~/.ssh/config << EOF
        Host production-server
          HostName ${{ vars.SERVER_HOST }}
          User ${{ vars.SERVER_USERNAME }}
          Port ${{ vars.SERVER_PORT }}
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF
        
        chmod 600 ~/.ssh/config

    - name: 📤 Déploiement sur le serveur avec Reverse Proxy
      run: |
        echo "🚀 Déploiement des fichiers sur le serveur avec architecture reverse proxy..."
        
        # Création du répertoire de déploiement
        ssh production-server "mkdir -p /srv/activibe && cd /srv/activibe"
        
        # Copie des fichiers de configuration
        echo "📁 Copie des fichiers de configuration..."
        scp docker-compose.yml production-server:/srv/activibe/
        scp update-env.sh production-server:/srv/activibe/
        scp auto-deploy.sh production-server:/srv/activibe/
        
        # Copie des scripts de déploiement pour reverse proxy
        echo "📁 Copie des scripts de déploiement reverse proxy..."
        scp deploy_production_server.sh production-server:/srv/activibe/
        scp test_production_containers.sh production-server:/srv/activibe/
        scp DEPLOYMENT-PRODUCTION-SERVER.md production-server:/srv/activibe/
        
        # Exécution du script de déploiement avec reverse proxy
        echo "🎯 Exécution du déploiement automatique avec reverse proxy..."
        ssh production-server "cd /srv/activibe && chmod +x auto-deploy.sh && chmod +x update-env.sh && chmod +x deploy_production_server.sh && chmod +x test_production_containers.sh && ./auto-deploy.sh '${{ env.IMAGE_NAME }}' '${{ env.FRONTEND_IMAGE_NAME }}' '$APP_KEY'"

    - name: 🧪 Tests post-déploiement avec Reverse Proxy
      run: |
        echo "🔍 Tests de vérification post-déploiement avec architecture reverse proxy..."
        
        # Test de connectivité des services
        echo "🌐 Test des services sur le serveur..."
        
        # Test frontend (port 3000)
        if ssh production-server "curl -f http://localhost:3000" >/dev/null 2>&1; then
          echo "✅ Frontend (port 3000) : OK"
        else
          echo "⚠️  Frontend (port 3000) : KO (peut nécessiter plus de temps)"
        fi
        
        # Test API backend (port 8080)
        if ssh production-server "curl -f http://localhost:8080/api/auth/login" >/dev/null 2>&1; then
          echo "✅ API Backend (port 8080) : OK"
        else
          echo "⚠️  API Backend (port 8080) : KO (peut nécessiter plus de temps)"
        fi
        
        # Test Neo4j (port 7474)
        if ssh production-server "curl -f http://localhost:7474" >/dev/null 2>&1; then
          echo "✅ Neo4j (port 7474) : OK"
        else
          echo "⚠️  Neo4j (port 7474) : KO"
        fi
        
        # Test de l'IP privée
        echo "🏠 Test de l'IP privée 10.0.0.244..."
        if ssh production-server "curl -f http://10.0.0.244:3000" >/dev/null 2>&1; then
          echo "✅ Frontend sur 10.0.0.244:3000 : OK"
        else
          echo "⚠️  Frontend sur 10.0.0.244:3000 : KO"
        fi
        
        if ssh production-server "curl -f http://10.0.0.244:8080/api/auth/login" >/dev/null 2>&1; then
          echo "✅ API sur 10.0.0.244:8080 : OK"
        else
          echo "⚠️  API sur 10.0.0.244:8080 : KO"
        fi
        
        # Affichage de l'état des containers
        echo "📊 État des containers :"
        ssh production-server "cd /srv/activibe && docker compose -f docker-compose.yml ps"
        
        # Exécution du script de test
        echo "🧪 Exécution du script de test des conteneurs..."
        ssh production-server "cd /srv/activibe && ./test_production_containers.sh"

    - name: 📧 Notification de succès
      if: success()
      run: |
        echo "🎉 DÉPLOIEMENT RÉUSSI !"
        echo ""
        echo "🌐 L'application Acti'Vibe est maintenant accessible :"
        echo "   • Frontend Nuxt.js : http://10.0.0.244:3000 (via reverse proxy)"
        echo "   • Backend Laravel API : http://10.0.0.244:8080 (via reverse proxy)"
        echo "   • phpMyAdmin : http://10.0.0.244:8082"
        echo "   • Neo4j : http://10.0.0.244:7474"
        echo ""
        echo "🔧 Configuration requise sur le reverse proxy externe :"
        echo "   • activibe.be/ -> 10.0.0.244:3000"
        echo "   • activibe.be/api/* -> 10.0.0.244:8080/api/*"
        echo ""
        echo "🐳 Image déployée : ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "📅 Date : $(date)"

    - name: 🚨 Notification d'échec
      if: failure()
      run: |
        echo "❌ ÉCHEC DU DÉPLOIEMENT !"
        echo ""
        echo "🔍 Vérifiez les logs ci-dessus pour identifier le problème."
        echo "📋 Points à vérifier :"
        echo "   • Connexion SSH au serveur"
        echo "   • Variables d'environnement GitHub"
        echo "   • Disponibilité de DockerHub"
        echo "   • État du serveur de production"
        echo ""
        echo "🆘 En cas de problème persistant, connectez-vous manuellement :"
        echo "   ssh ${{ vars.SERVER_USERNAME }}@${{ vars.SERVER_HOST }}"
        echo "   cd /srv/activibe && ./auto-deploy.sh"
