name: 🚀 Déploiement Production Automatique

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Forcer la reconstruction des images'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/activibe-app
  COMPOSE_FILE: docker-compose.nginx-proxy.yml
  ENV_FILE: production.env

jobs:
  build-and-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🐳 Configuration Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Connexion DockerHub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: 🏗️ Build et Push de l'image Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📝 Génération des fichiers de configuration
      run: |
        echo "🔧 Création du fichier docker-compose.nginx-proxy.yml..."
        cat > docker-compose.nginx-proxy.yml << 'EOF'
        version: "3.8"

        services:
          # Application Laravel + Nuxt (image unique)
          app:
            image: ${IMAGE_NAME:-${{ env.IMAGE_NAME }}:latest}
            container_name: activibe-app
            restart: unless-stopped
            environment:
              - VIRTUAL_HOST=${VIRTUAL_HOST:-bookyourcoach.com,www.bookyourcoach.com}
              - VIRTUAL_PORT=3001
              - LETSENCRYPT_HOST=${LETSENCRYPT_HOST:-bookyourcoach.com,www.bookyourcoach.com}
              - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@bookyourcoach.com}
              - APP_NAME=${APP_NAME}
              - APP_ENV=${APP_ENV}
              - APP_DEBUG=${APP_DEBUG}
              - APP_URL=${APP_URL}
              - DB_CONNECTION=${DB_CONNECTION}
              - DB_HOST=${DB_HOST}
              - DB_PORT=3306
              - DB_DATABASE=${DB_DATABASE}
              - DB_USERNAME=${DB_USERNAME}
              - DB_PASSWORD=${DB_PASSWORD}
              - REDIS_HOST=redis
              - REDIS_PORT=6379
              - REDIS_PASSWORD=${REDIS_PASSWORD}
              - CACHE_DRIVER=${CACHE_DRIVER}
              - SESSION_DRIVER=${SESSION_DRIVER}
              - QUEUE_CONNECTION=${QUEUE_CONNECTION}
            ports:
              - "3001:3001"  # Frontend Nuxt
              - "8080:80"    # Backend Laravel (nginx interne)
              - "9000:9000"  # PHP-FPM
            volumes:
              - app_storage:/var/www/storage
              - app_bootstrap_cache:/var/www/bootstrap/cache
              - ssl_certs:/etc/ssl/certs
            depends_on:
              - redis
              - neo4j
            networks:
              - nginx-proxy
              - app-network

          # Base de données MySQL hébergée sur OVH (pas de container local)

          # phpMyAdmin pour administrer la base de données OVH
          phpmyadmin:
            image: phpmyadmin:latest
            container_name: activibe-phpmyadmin
            restart: unless-stopped
            ports:
              - "8082:80"
            environment:
              - PMA_HOST=${DB_HOST}
              - PMA_PORT=${DB_PORT}
              - PMA_USER=${DB_USERNAME}
              - PMA_PASSWORD=${DB_PASSWORD}
              - UPLOAD_LIMIT=256M
              - MEMORY_LIMIT=512M
            networks:
              - app-network
            depends_on:
              - redis

          # Redis pour cache et sessions
          redis:
            image: redis:7-alpine
            container_name: activibe-redis
            restart: unless-stopped
            volumes:
              - redis_data:/data
            networks:
              - app-network
            command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

          # Neo4j pour analyses graphiques
          neo4j:
            image: neo4j:5.15-community
            container_name: activibe-neo4j
            restart: unless-stopped
            ports:
              - "7474:7474"  # Interface web
              - "7687:7687"  # Bolt protocol
            environment:
              - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
              - NEO4J_PLUGINS=["apoc"]
              - NEO4J_dbms_security_procedures_unrestricted=apoc.*
              - NEO4J_dbms_security_procedures_allowlist=apoc.*
              - NEO4J_dbms_connector_http_listen_address=0.0.0.0:7474
              - NEO4J_dbms_connector_https_listen_address=0.0.0.0:7473
              - NEO4J_dbms_connector_bolt_listen_address=0.0.0.0:7687
              - NEO4J_dbms_default_listen_address=0.0.0.0
              - NEO4J_dbms_memory_pagecache_size=512M
              - NEO4J_dbms_memory_heap_max_size=1G
              - NEO4J_dbms_memory_heap_initial_size=512M
            volumes:
              - neo4j_data:/data
              - neo4j_logs:/logs
              - neo4j_import:/var/lib/neo4j/import
              - neo4j_plugins:/plugins
            networks:
              - app-network

          # nginx-proxy pour reverse proxy automatique
          nginx-proxy:
            image: nginxproxy/nginx-proxy:latest
            container_name: activibe-nginx-proxy
            restart: unless-stopped
            ports:
              - "8081:80"   # HTTP via nginx-proxy
              - "8444:443"  # HTTPS via nginx-proxy
            volumes:
              - /var/run/docker.sock:/tmp/docker.sock:ro
              - nginx_certs:/etc/nginx/certs
              - nginx_vhost:/etc/nginx/vhost.d
              - nginx_html:/usr/share/nginx/html
              - nginx_dhparam:/etc/nginx/dhparam
            environment:
              - TRUST_DOWNSTREAM_PROXY=false
            networks:
              - nginx-proxy
            labels:
              - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"

          # Container infiswap-front (préservé sur port 80)
          infiswap-front:
            image: nginx:alpine
            container_name: infiswap-front
            restart: unless-stopped
            ports:
              - "80:80"  # Port 80 préservé pour infiswap-front
            volumes:
              - ./infiswap-static:/usr/share/nginx/html:ro
            networks:
              - nginx-proxy

        volumes:
          redis_data:
            driver: local
          neo4j_data:
            driver: local
          neo4j_logs:
            driver: local
          neo4j_import:
            driver: local
          neo4j_plugins:
            driver: local
          app_storage:
            driver: local
          app_bootstrap_cache:
            driver: local
          ssl_certs:
            driver: local
          nginx_certs:
            driver: local
          nginx_vhost:
            driver: local
          nginx_html:
            driver: local
          nginx_dhparam:
            driver: local

        networks:
          nginx-proxy:
            driver: bridge
          app-network:
            driver: bridge
            internal: true
        EOF

        echo "🔧 Création du fichier production.env..."
        cat > production.env << 'EOF'
        # Configuration de production BookYourCoach
        # Application
        APP_NAME="BookYourCoach"
        APP_ENV=production
        APP_DEBUG=false
        APP_URL=https://bookyourcoach.com

        # nginx-proxy Configuration
        VIRTUAL_HOST=bookyourcoach.com,www.bookyourcoach.com
        LETSENCRYPT_HOST=bookyourcoach.com,www.bookyourcoach.com
        LETSENCRYPT_EMAIL=admin@bookyourcoach.com

        # Base de données MySQL externe (OVH) - CORRIGÉ
        DB_CONNECTION=mysql
        DB_HOST=${{ secrets.DB_HOST_OVH }}
        DB_PORT=${{ secrets.DB_PORT_OVH }}
        DB_DATABASE=${{ secrets.DB_DATABASE_OVH }}
        DB_USERNAME=${{ secrets.DB_USERNAME_OVH }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD_OVH }}

        # Cache Redis
        BROADCAST_DRIVER=redis
        CACHE_DRIVER=redis
        FILESYSTEM_DISK=local
        QUEUE_CONNECTION=redis
        SESSION_DRIVER=redis
        SESSION_LIFETIME=120

        REDIS_HOST=redis
        REDIS_PASSWORD=redis_secure_password_2024
        REDIS_PORT=6379

        # Mail SMTP
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.gmail.com
        MAIL_PORT=587
        MAIL_USERNAME=noreply@bookyourcoach.com
        MAIL_PASSWORD=your-smtp-password
        MAIL_ENCRYPTION=tls
        MAIL_FROM_ADDRESS="noreply@bookyourcoach.com"
        MAIL_FROM_NAME="${APP_NAME}"

        # Configuration spécifique BookYourCoach
        SANCTUM_STATEFUL_DOMAINS=bookyourcoach.com,www.bookyourcoach.com
        SESSION_DOMAIN=.bookyourcoach.com

        # MySQL Root Password
        MYSQL_ROOT_PASSWORD=mysql_root_secure_password_2024

        # Neo4j Configuration
        NEO4J_PASSWORD=neo4j_secure_password_2024

        # Docker Image Configuration
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        DOCKER_REGISTRY=docker.io
        EOF

        echo "🔧 Création du script de déploiement automatique..."
        cat > auto-deploy.sh << 'EOF'
        #!/bin/bash
        # Script de déploiement automatique via GitHub Actions

        set -e

        # Couleurs
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'

        log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
        log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
        log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
        log_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

        # Configuration
        COMPOSE_FILE="docker-compose.nginx-proxy.yml"
        ENV_FILE="production.env"
        APP_DIR="/srv/activibe"
        BACKUP_DIR="/tmp/activibe-backup-$(date +%Y%m%d-%H%M%S)"

        log_step "🚀 Démarrage du déploiement automatique..."

        # Création du répertoire de sauvegarde
        log_info "📁 Création de la sauvegarde..."
        mkdir -p "$BACKUP_DIR"

        # Sauvegarde des containers actuels
        docker ps > "$BACKUP_DIR/docker-ps-before.txt" 2>/dev/null || true
        docker images > "$BACKUP_DIR/docker-images-before.txt" 2>/dev/null || true

        # Sauvegarde des logs des containers existants
        for container in activibe-app activibe-nginx-proxy bookyourcoach_mysql_prod activibe-redis activibe-neo4j infiswap-front; do
            if docker ps -a --format '{{.Names}}' | grep -q "^$container$"; then
                log_info "💾 Sauvegarde des logs de $container..."
                docker logs "$container" > "$BACKUP_DIR/${container}-logs.txt" 2>&1 || true
            fi
        done

        # Arrêt propre des containers existants
        log_info "🛑 Arrêt des containers existants..."
        
        # Essayer d'arrêter avec docker compose si possible
        if [[ -f "$COMPOSE_FILE" ]]; then
            docker compose -f "$COMPOSE_FILE" down 2>/dev/null || true
        fi
        
        # Arrêt forcé des containers connus
        for container in activibe-app activibe-nginx-proxy bookyourcoach_mysql_prod activibe-redis activibe-neo4j infiswap-front; do
            if docker ps --format '{{.Names}}' | grep -q "^$container$"; then
                log_info "🔄 Arrêt de $container..."
                docker stop "$container" 2>/dev/null || true
                docker rm "$container" 2>/dev/null || true
            fi
        done

        # Nettoyage des ressources orphelines
        log_info "🧹 Nettoyage des ressources orphelines..."
        docker container prune -f 2>/dev/null || true
        docker network prune -f 2>/dev/null || true

        # Création du répertoire infiswap-static
        log_info "📂 Configuration d'infiswap-front..."
        mkdir -p ./infiswap-static
        cat > ./infiswap-static/index.html << 'HTML'
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Infiswap Front</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; }
                .status { color: #27ae60; font-weight: bold; }
                .info { background: #ecf0f1; padding: 15px; border-radius: 4px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🌐 Infiswap Front</h1>
                <p class="status">✅ Service Actif sur le Port 80</p>
                <div class="info">
                    <h3>🔗 Services Disponibles</h3>
                    <ul>
                        <li><strong>BookYourCoach App:</strong> <a href="http://91.134.77.98:8081">Port 8081</a></li>
                        <li><strong>Neo4j Interface:</strong> <a href="http://91.134.77.98:7474">Port 7474</a></li>
                        <li><strong>Infiswap Front:</strong> Port 80 (cette page)</li>
                    </ul>
                </div>
                <p><small>🕒 Dernière mise à jour: $(date)</small></p>
            </div>
        </body>
        </html>
        HTML

        # Pull de la dernière image
        log_info "📥 Récupération de la dernière image Docker..."
        source "$ENV_FILE"
        docker pull "${IMAGE_NAME}:latest" || {
            log_warning "⚠️  Impossible de récupérer l'image, utilisation de l'image locale"
        }

        # Démarrage des services
        log_info "🚀 Démarrage des services..."
        docker compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d

        # Attente du démarrage
        log_info "⏳ Attente du démarrage des services (60 secondes)..."
        sleep 60

        # Vérification de l'état des services
        log_step "🔍 Vérification de l'état des services..."
        docker compose -f "$COMPOSE_FILE" ps

        # Tests de connectivité
        log_step "🧪 Tests de connectivité..."

        # Test des containers
        containers=("activibe-app" "activibe-nginx-proxy" "infiswap-front" "bookyourcoach_mysql_prod" "activibe-redis" "activibe-neo4j")
        
        for container in "${containers[@]}"; do
            if docker ps --format '{{.Names}}' | grep -q "^$container$"; then
                log_info "✅ $container : En cours d'exécution"
            else
                log_error "❌ $container : Non trouvé"
            fi
        done

        # Tests des ports
        log_info "🔌 Test des ports..."
        
        # Test port 80 (infiswap-front)
        if curl -f http://localhost:80 >/dev/null 2>&1; then
            log_info "✅ Port 80 (infiswap-front) : Accessible"
        else
            log_warning "⚠️  Port 80 (infiswap-front) : Non accessible"
        fi

        # Test port 8081 (nginx-proxy)
        sleep 30  # Attente supplémentaire pour nginx-proxy
        if curl -f http://localhost:8081 >/dev/null 2>&1; then
            log_info "✅ Port 8081 (nginx-proxy) : Accessible"
        else
            log_warning "⚠️  Port 8081 (nginx-proxy) : Non accessible (peut nécessiter plus de temps)"
        fi

        # Test port 7474 (Neo4j)
        if curl -f http://localhost:7474 >/dev/null 2>&1; then
            log_info "✅ Port 7474 (Neo4j) : Accessible"
        else
            log_warning "⚠️  Port 7474 (Neo4j) : Non accessible"
        fi

        # Sauvegarde post-déploiement
        docker ps > "$BACKUP_DIR/docker-ps-after.txt" 2>/dev/null || true
        docker images > "$BACKUP_DIR/docker-images-after.txt" 2>/dev/null || true

        # Logs récents
        log_step "📋 Logs récents des services principaux..."
        
        echo "=== Logs activibe-app ==="
        docker logs --tail=10 activibe-app 2>/dev/null || log_warning "Pas de logs pour activibe-app"
        
        echo "=== Logs nginx-proxy ==="
        docker logs --tail=10 activibe-nginx-proxy 2>/dev/null || log_warning "Pas de logs pour nginx-proxy"

        # Résumé final
        log_step "📊 RÉSUMÉ DU DÉPLOIEMENT"
        echo ""
        log_info "🎯 URLs d'accès :"
        log_info "   • Application principale : http://91.134.77.98:8081"
        log_info "   • Infiswap Front : http://91.134.77.98:80"
        log_info "   • Neo4j Interface : http://91.134.77.98:7474"
        echo ""
        log_info "📁 Sauvegarde : $BACKUP_DIR"
        log_info "🐳 Configuration : $COMPOSE_FILE"
        log_info "⚙️  Variables : $ENV_FILE"
        echo ""

        # État final des services
        log_info "🔍 État final des services :"
        docker compose -f "$COMPOSE_FILE" ps

        log_step "✅ Déploiement automatique terminé avec succès !"
        EOF

        chmod +x auto-deploy.sh

        echo "✅ Fichiers de configuration générés avec succès !"

    - name: 🔑 Configuration SSH
      run: |
        echo "🔧 Configuration de la connexion SSH..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Configuration SSH pour éviter les vérifications d'hôte
        cat > ~/.ssh/config << EOF
        Host production-server
          HostName ${{ vars.SERVER_HOST }}
          User ${{ vars.SERVER_USERNAME }}
          Port ${{ vars.SERVER_PORT }}
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF
        
        chmod 600 ~/.ssh/config

    - name: 📤 Déploiement sur le serveur
      run: |
        echo "🚀 Déploiement des fichiers sur le serveur..."
        
        # Création du répertoire de déploiement
        ssh production-server "mkdir -p /srv/activibe && cd /srv/activibe"
        
        # Copie des fichiers de configuration
        echo "📁 Copie des fichiers de configuration..."
        scp docker-compose.nginx-proxy.yml production-server:/srv/activibe/
        scp production.env production-server:/srv/activibe/
        scp auto-deploy.sh production-server:/srv/activibe/
        
        # Exécution du script de déploiement
        echo "🎯 Exécution du déploiement automatique..."
        ssh production-server "cd /srv/activibe && chmod +x auto-deploy.sh && ./auto-deploy.sh"

    - name: 🧪 Tests post-déploiement
      run: |
        echo "🔍 Tests de vérification post-déploiement..."
        
        # Test de connectivité des services
        echo "🌐 Test des services sur le serveur..."
        
        # Test infiswap-front (port 80)
        if ssh production-server "curl -f http://localhost:80" >/dev/null 2>&1; then
          echo "✅ infiswap-front (port 80) : OK"
        else
          echo "⚠️  infiswap-front (port 80) : KO"
        fi
        
        # Test nginx-proxy (port 8081)
        if ssh production-server "curl -f http://localhost:8081" >/dev/null 2>&1; then
          echo "✅ nginx-proxy (port 8081) : OK"
        else
          echo "⚠️  nginx-proxy (port 8081) : KO (peut nécessiter plus de temps)"
        fi
        
        # Test Neo4j (port 7474)
        if ssh production-server "curl -f http://localhost:7474" >/dev/null 2>&1; then
          echo "✅ Neo4j (port 7474) : OK"
        else
          echo "⚠️  Neo4j (port 7474) : KO"
        fi
        
        # Affichage de l'état des containers
        echo "📊 État des containers :"
        ssh production-server "cd /srv/activibe && docker compose -f docker-compose.nginx-proxy.yml ps"

    - name: 📧 Notification de succès
      if: success()
      run: |
        echo "🎉 DÉPLOIEMENT RÉUSSI !"
        echo ""
        echo "🌐 L'application BookYourCoach est maintenant accessible :"
        echo "   • Application : http://${{ vars.SERVER_HOST }}:8081"
        echo "   • Infiswap Front : http://${{ vars.SERVER_HOST }}:80"
        echo "   • Neo4j : http://${{ vars.SERVER_HOST }}:7474"
        echo ""
        echo "🐳 Image déployée : ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "📅 Date : $(date)"

    - name: 🚨 Notification d'échec
      if: failure()
      run: |
        echo "❌ ÉCHEC DU DÉPLOIEMENT !"
        echo ""
        echo "🔍 Vérifiez les logs ci-dessus pour identifier le problème."
        echo "📋 Points à vérifier :"
        echo "   • Connexion SSH au serveur"
        echo "   • Variables d'environnement GitHub"
        echo "   • Disponibilité de DockerHub"
        echo "   • État du serveur de production"
        echo ""
        echo "🆘 En cas de problème persistant, connectez-vous manuellement :"
        echo "   ssh ${{ vars.SERVER_USERNAME }}@${{ vars.SERVER_HOST }}"
        echo "   cd /srv/activibe && ./auto-deploy.sh"
